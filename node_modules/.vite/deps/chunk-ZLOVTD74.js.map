{
  "version": 3,
  "sources": ["../../ol/expr/expression.js"],
  "sourcesContent": ["/**\n * @module ol/expr/expression\n */\nimport {ascending} from '../array.js';\nimport {fromString as colorFromString} from '../color.js';\nimport {toSize} from '../size.js';\n\n/**\n * @fileoverview This module includes types and functions for parsing array encoded expressions.\n * The result of parsing an encoded expression is one of the specific expression classes.\n * During parsing, information is added to the parsing context about the data accessed by the\n * expression.\n */\n\n/**\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\n * which in turns takes {@link import(\"./expression.js\").ExpressionValue} arguments.\n *\n * See below for details on the available operators (with notes for those that are WebGL or Canvas only).\n *\n * * Reading operators:\n *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\n *     of bands, depending on the underlying data source and\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels (WebGL only).\n *   * `['get', attributeName]` fetches a feature property value, similar to `feature.get('attributeName')`.\n *   * `['get', attributeName, keyOrArrayIndex, ...]` (Canvas only) Access nested properties and array items of a\n *     feature property. The result is `undefined` when there is nothing at the specified key or index.\n *   * `['geometry-type']` returns a feature's geometry type as string, either: 'LineString', 'Point' or 'Polygon'\n *     `Multi*` values are returned as their singular equivalent\n *     `Circle` geometries are returned as 'Polygon'\n *     `GeometryCollection` geometries are returned as the type of the first geometry found in the collection (WebGL only).\n *   * `['resolution']` returns the current resolution\n *   * `['time']` The time in seconds since the creation of the layer (WebGL only).\n *   * `['var', 'varName']` fetches a value from the style variables; will throw an error if that variable is undefined\n *   * `['zoom']` The current zoom level (WebGL only).\n *   * `['line-metric']` returns the M component of the current point on a line (WebGL only); in case where the geometry layout of the line\n *      does not contain an M component (e.g. XY or XYZ), 0 is returned; 0 is also returned for geometries other than lines.\n *      Please note that the M component will be linearly interpolated between the two points composing a segment.\n *\n * * Math operators:\n *   * `['*', value1, value2, ...]` multiplies the values (either numbers or colors)\n *   * `['/', value1, value2]` divides `value1` by `value2`\n *   * `['+', value1, value2, ...]` adds the values\n *   * `['-', value1, value2]` subtracts `value2` from `value1`\n *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`\n *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\n *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\n *   * `['abs', value1]` returns the absolute value of `value1`\n *   * `['floor', value1]` returns the nearest integer less than or equal to `value1`\n *   * `['round', value1]` returns the nearest integer to `value1`\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\n *   * `['sin', value1]` returns the sine of `value1`\n *   * `['cos', value1]` returns the cosine of `value1`\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\n *   * `['sqrt', value1]` returns the square root of `value1`\n *\n * * Transform operators:\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\n *     All conditions should be `boolean`, output and fallback can be any kind.\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\n *     returns the `fallback` value.\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\n *     `fallback` values must be of the same type, and can be of any kind.\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\n *     of 1 is equivalent to `['linear']`.\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\n *     between `output1` and `outputN`.\n *   * `['string', value1, value2, ...]` returns the first value in the list that evaluates to a string.\n *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 'default value']]`\n *     (Canvas only).\n *   * `['number', value1, value2, ...]` returns the first value in the list that evaluates to a number.\n *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 42]]`\n *     (Canvas only).\n *   * `['coalesce', value1, value2, ...]` returns the first value in the list which is not null or undefined.\n *     An example would be to provide a default value for get: `['coalesce', ['get','propertyname'], 'default value']]`\n *     (Canvas only).\n *\n * * Logical operators:\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\n *   * `['has', attributeName, keyOrArrayIndex, ...]` returns `true` if feature properties include the (nested) key `attributeName`,\n *     `false` otherwise.\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\n *     (inclusively), or `false` otherwise.\n *   * `['in', needle, haystack]` returns `true` if `needle` is found in `haystack`, and\n *     `false` otherwise.\n *     This operator has the following limitations:\n *     * `haystack` has to be an array of numbers or strings (searching for a substring in a string is not supported yet)\n *     * Only literal arrays are supported as `haystack` for now; this means that `haystack` cannot be the result of an\n *     expression. If `haystack` is an array of strings, use the `literal` operator to disambiguate from an expression:\n *     `['literal', ['abc', 'def', 'ghi']]`\n *\n * * Conversion operators:\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\n *     values can currently only be 2, 3 or 4 (WebGL only).\n *   * `['color', red, green, blue, alpha]` or `['color', shade, alpha]` creates a `color` value from `number` values;\n *     the `alpha` parameter is optional; if not specified, it will be set to 1 (WebGL only).\n *     Note: `red`, `green` and `blue` or `shade` components must be values between 0 and 255; `alpha` between 0 and 1.\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\n *     in the 0-255 range and a in the 0-1 range) (WebGL only).\n *   * `['to-string', value]` converts the input value to a string. If the input is a boolean, the result is \"true\" or \"false\".\n *     If the input is a number, it is converted to a string as specified by the \"NumberToString\" algorithm of the ECMAScript\n *     Language Specification. If the input is a color, it is converted to a string of the form \"rgba(r,g,b,a)\". (Canvas only)\n *\n * Values can either be literals or another operator, as they will be evaluated recursively.\n * Literal values can be of the following types:\n * * `boolean`\n * * `number`\n * * `number[]` (number arrays can only have a length of 2, 3 or 4)\n * * `string`\n * * {@link module:ol/color~Color}\n *\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\n * @api\n */\n\nlet numTypes = 0;\nexport const NoneType = 0;\nexport const BooleanType = 1 << numTypes++;\nexport const NumberType = 1 << numTypes++;\nexport const StringType = 1 << numTypes++;\nexport const ColorType = 1 << numTypes++;\nexport const NumberArrayType = 1 << numTypes++;\nexport const SizeType = 1 << numTypes++;\nexport const AnyType = Math.pow(2, numTypes) - 1;\n\nconst typeNames = {\n  [BooleanType]: 'boolean',\n  [NumberType]: 'number',\n  [StringType]: 'string',\n  [ColorType]: 'color',\n  [NumberArrayType]: 'number[]',\n  [SizeType]: 'size',\n};\n\nconst namedTypes = Object.keys(typeNames).map(Number).sort(ascending);\n\n/**\n * @param {number} type The type.\n * @return {boolean} The type is one of the specific types (not any or a union type).\n */\nfunction isSpecific(type) {\n  return type in typeNames;\n}\n\n/**\n * Get a string representation for a type.\n * @param {number} type The type.\n * @return {string} The type name.\n */\nexport function typeName(type) {\n  const names = [];\n  for (const namedType of namedTypes) {\n    if (includesType(type, namedType)) {\n      names.push(typeNames[namedType]);\n    }\n  }\n  if (names.length === 0) {\n    return 'untyped';\n  }\n  if (names.length < 3) {\n    return names.join(' or ');\n  }\n  return names.slice(0, -1).join(', ') + ', or ' + names[names.length - 1];\n}\n\n/**\n * @param {number} broad The broad type.\n * @param {number} specific The specific type.\n * @return {boolean} The broad type includes the specific type.\n */\nexport function includesType(broad, specific) {\n  return (broad & specific) === specific;\n}\n\n/**\n * @param {number} oneType One type.\n * @param {number} otherType Another type.\n * @return {boolean} The set of types overlap (share a common specific type)\n */\nexport function overlapsType(oneType, otherType) {\n  return !!(oneType & otherType);\n}\n\n/**\n * @param {number} type The type.\n * @param {number} expected The expected type.\n * @return {boolean} The given type is exactly the expected type.\n */\nexport function isType(type, expected) {\n  return type === expected;\n}\n\n/**\n * @typedef {boolean|number|string|Array<number>} LiteralValue\n */\n\nexport class LiteralExpression {\n  /**\n   * @param {number} type The value type.\n   * @param {LiteralValue} value The literal value.\n   */\n  constructor(type, value) {\n    if (!isSpecific(type)) {\n      throw new Error(\n        `literal expressions must have a specific type, got ${typeName(type)}`,\n      );\n    }\n    this.type = type;\n    this.value = value;\n  }\n}\n\nexport class CallExpression {\n  /**\n   * @param {number} type The return type.\n   * @param {string} operator The operator.\n   * @param {...Expression} args The arguments.\n   */\n  constructor(type, operator, ...args) {\n    this.type = type;\n    this.operator = operator;\n    this.args = args;\n  }\n}\n\n/**\n * @typedef {LiteralExpression|CallExpression} Expression\n */\n\n/**\n * @typedef {Object} ParsingContext\n * @property {Set<string>} variables Variables referenced with the 'var' operator.\n * @property {Set<string>} properties Properties referenced with the 'get' operator.\n * @property {boolean} featureId The style uses the feature id.\n * @property {boolean} geometryType The style uses the feature geometry type.\n */\n\n/**\n * @return {ParsingContext} A new parsing context.\n */\nexport function newParsingContext() {\n  return {\n    variables: new Set(),\n    properties: new Set(),\n    featureId: false,\n    geometryType: false,\n  };\n}\n\n/**\n * @typedef {LiteralValue|Array} EncodedExpression\n */\n\n/**\n * @param {EncodedExpression} encoded The encoded expression.\n * @param {number} expectedType The expected type.\n * @param {ParsingContext} context The parsing context.\n * @return {Expression} The parsed expression result.\n */\nexport function parse(encoded, expectedType, context) {\n  switch (typeof encoded) {\n    case 'boolean': {\n      if (isType(expectedType, StringType)) {\n        return new LiteralExpression(StringType, encoded ? 'true' : 'false');\n      }\n      if (!includesType(expectedType, BooleanType)) {\n        throw new Error(\n          `got a boolean, but expected ${typeName(expectedType)}`,\n        );\n      }\n      return new LiteralExpression(BooleanType, encoded);\n    }\n    case 'number': {\n      if (isType(expectedType, SizeType)) {\n        return new LiteralExpression(SizeType, toSize(encoded));\n      }\n      if (isType(expectedType, BooleanType)) {\n        return new LiteralExpression(BooleanType, !!encoded);\n      }\n      if (isType(expectedType, StringType)) {\n        return new LiteralExpression(StringType, encoded.toString());\n      }\n      if (!includesType(expectedType, NumberType)) {\n        throw new Error(`got a number, but expected ${typeName(expectedType)}`);\n      }\n      return new LiteralExpression(NumberType, encoded);\n    }\n    case 'string': {\n      if (isType(expectedType, ColorType)) {\n        return new LiteralExpression(ColorType, colorFromString(encoded));\n      }\n      if (isType(expectedType, BooleanType)) {\n        return new LiteralExpression(BooleanType, !!encoded);\n      }\n      if (!includesType(expectedType, StringType)) {\n        throw new Error(`got a string, but expected ${typeName(expectedType)}`);\n      }\n      return new LiteralExpression(StringType, encoded);\n    }\n    default: {\n      // pass\n    }\n  }\n\n  if (!Array.isArray(encoded)) {\n    throw new Error('expression must be an array or a primitive value');\n  }\n\n  if (encoded.length === 0) {\n    throw new Error('empty expression');\n  }\n\n  if (typeof encoded[0] === 'string') {\n    return parseCallExpression(encoded, expectedType, context);\n  }\n\n  for (const item of encoded) {\n    if (typeof item !== 'number') {\n      throw new Error('expected an array of numbers');\n    }\n  }\n\n  if (isType(expectedType, SizeType)) {\n    if (encoded.length !== 2) {\n      throw new Error(\n        `expected an array of two values for a size, got ${encoded.length}`,\n      );\n    }\n    return new LiteralExpression(SizeType, encoded);\n  }\n\n  if (isType(expectedType, ColorType)) {\n    if (encoded.length === 3) {\n      return new LiteralExpression(ColorType, [...encoded, 1]);\n    }\n    if (encoded.length === 4) {\n      return new LiteralExpression(ColorType, encoded);\n    }\n    throw new Error(\n      `expected an array of 3 or 4 values for a color, got ${encoded.length}`,\n    );\n  }\n\n  if (!includesType(expectedType, NumberArrayType)) {\n    throw new Error(\n      `got an array of numbers, but expected ${typeName(expectedType)}`,\n    );\n  }\n\n  return new LiteralExpression(NumberArrayType, encoded);\n}\n\n/**\n * @type {Object<string, string>}\n */\nexport const Ops = {\n  Get: 'get',\n  Var: 'var',\n  Concat: 'concat',\n  GeometryType: 'geometry-type',\n  LineMetric: 'line-metric',\n  Any: 'any',\n  All: 'all',\n  Not: '!',\n  Resolution: 'resolution',\n  Zoom: 'zoom',\n  Time: 'time',\n  Equal: '==',\n  NotEqual: '!=',\n  GreaterThan: '>',\n  GreaterThanOrEqualTo: '>=',\n  LessThan: '<',\n  LessThanOrEqualTo: '<=',\n  Multiply: '*',\n  Divide: '/',\n  Add: '+',\n  Subtract: '-',\n  Clamp: 'clamp',\n  Mod: '%',\n  Pow: '^',\n  Abs: 'abs',\n  Floor: 'floor',\n  Ceil: 'ceil',\n  Round: 'round',\n  Sin: 'sin',\n  Cos: 'cos',\n  Atan: 'atan',\n  Sqrt: 'sqrt',\n  Match: 'match',\n  Between: 'between',\n  Interpolate: 'interpolate',\n  Coalesce: 'coalesce',\n  Case: 'case',\n  In: 'in',\n  Number: 'number',\n  String: 'string',\n  Array: 'array',\n  Color: 'color',\n  Id: 'id',\n  Band: 'band',\n  Palette: 'palette',\n  ToString: 'to-string',\n  Has: 'has',\n};\n\n/**\n * @typedef {function(Array, number, ParsingContext):Expression} Parser\n *\n * Second argument is the expected type.\n */\n\n/**\n * @type {Object<string, Parser>}\n */\nconst parsers = {\n  [Ops.Get]: createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs),\n  [Ops.Var]: createCallExpressionParser(hasArgsCount(1, 1), withVarArgs),\n  [Ops.Has]: createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs),\n  [Ops.Id]: createCallExpressionParser(usesFeatureId, withNoArgs),\n  [Ops.Concat]: createCallExpressionParser(\n    hasArgsCount(2, Infinity),\n    withArgsOfType(StringType),\n  ),\n  [Ops.GeometryType]: createCallExpressionParser(usesGeometryType, withNoArgs),\n  [Ops.LineMetric]: createCallExpressionParser(withNoArgs),\n  [Ops.Resolution]: createCallExpressionParser(withNoArgs),\n  [Ops.Zoom]: createCallExpressionParser(withNoArgs),\n  [Ops.Time]: createCallExpressionParser(withNoArgs),\n  [Ops.Any]: createCallExpressionParser(\n    hasArgsCount(2, Infinity),\n    withArgsOfType(BooleanType),\n  ),\n  [Ops.All]: createCallExpressionParser(\n    hasArgsCount(2, Infinity),\n    withArgsOfType(BooleanType),\n  ),\n  [Ops.Not]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(BooleanType),\n  ),\n  [Ops.Equal]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(AnyType),\n  ),\n  [Ops.NotEqual]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(AnyType),\n  ),\n  [Ops.GreaterThan]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.GreaterThanOrEqualTo]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.LessThan]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.LessThanOrEqualTo]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Multiply]: createCallExpressionParser(\n    hasArgsCount(2, Infinity),\n    withArgsOfReturnType,\n  ),\n  [Ops.Coalesce]: createCallExpressionParser(\n    hasArgsCount(2, Infinity),\n    withArgsOfReturnType,\n  ),\n  [Ops.Divide]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Add]: createCallExpressionParser(\n    hasArgsCount(2, Infinity),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Subtract]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Clamp]: createCallExpressionParser(\n    hasArgsCount(3, 3),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Mod]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Pow]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Abs]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Floor]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Ceil]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Round]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Sin]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Cos]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Atan]: createCallExpressionParser(\n    hasArgsCount(1, 2),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Sqrt]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Match]: createCallExpressionParser(\n    hasArgsCount(4, Infinity),\n    hasEvenArgs,\n    withMatchArgs,\n  ),\n  [Ops.Between]: createCallExpressionParser(\n    hasArgsCount(3, 3),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Interpolate]: createCallExpressionParser(\n    hasArgsCount(6, Infinity),\n    hasEvenArgs,\n    withInterpolateArgs,\n  ),\n  [Ops.Case]: createCallExpressionParser(\n    hasArgsCount(3, Infinity),\n    hasOddArgs,\n    withCaseArgs,\n  ),\n  [Ops.In]: createCallExpressionParser(hasArgsCount(2, 2), withInArgs),\n  [Ops.Number]: createCallExpressionParser(\n    hasArgsCount(1, Infinity),\n    withArgsOfType(AnyType),\n  ),\n  [Ops.String]: createCallExpressionParser(\n    hasArgsCount(1, Infinity),\n    withArgsOfType(AnyType),\n  ),\n  [Ops.Array]: createCallExpressionParser(\n    hasArgsCount(1, Infinity),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Color]: createCallExpressionParser(\n    hasArgsCount(1, 4),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Band]: createCallExpressionParser(\n    hasArgsCount(1, 3),\n    withArgsOfType(NumberType),\n  ),\n  [Ops.Palette]: createCallExpressionParser(\n    hasArgsCount(2, 2),\n    withPaletteArgs,\n  ),\n  [Ops.ToString]: createCallExpressionParser(\n    hasArgsCount(1, 1),\n    withArgsOfType(BooleanType | NumberType | StringType | ColorType),\n  ),\n};\n\n/**\n * @typedef {function(Array<EncodedExpression>, number, ParsingContext):Array<Expression>|void} ArgValidator\n *\n * An argument validator applies various checks to an encoded expression arguments and\n * returns the parsed arguments if any.  The second argument is the return type of the call expression.\n */\n\n/**\n * @type ArgValidator\n */\nfunction withGetArgs(encoded, returnType, context) {\n  const argsCount = encoded.length - 1;\n  const args = new Array(argsCount);\n  for (let i = 0; i < argsCount; ++i) {\n    const key = encoded[i + 1];\n    switch (typeof key) {\n      case 'number': {\n        args[i] = new LiteralExpression(NumberType, key);\n        break;\n      }\n      case 'string': {\n        args[i] = new LiteralExpression(StringType, key);\n        break;\n      }\n      default: {\n        throw new Error(\n          `expected a string key or numeric array index for a get operation, got ${key}`,\n        );\n      }\n    }\n    if (i === 0) {\n      context.properties.add(String(key));\n    }\n  }\n  return args;\n}\n\n/**\n * @type ArgValidator\n */\nfunction withVarArgs(encoded, returnType, context) {\n  const name = encoded[1];\n  if (typeof name !== 'string') {\n    throw new Error('expected a string argument for var operation');\n  }\n  context.variables.add(name);\n\n  return [new LiteralExpression(StringType, name)];\n}\n\n/**\n * @type ArgValidator\n */\nfunction usesFeatureId(encoded, returnType, context) {\n  context.featureId = true;\n}\n\n/**\n * @type ArgValidator\n */\nfunction usesGeometryType(encoded, returnType, context) {\n  context.geometryType = true;\n}\n\n/**\n * @type ArgValidator\n */\nfunction withNoArgs(encoded, returnType, context) {\n  const operation = encoded[0];\n  if (encoded.length !== 1) {\n    throw new Error(`expected no arguments for ${operation} operation`);\n  }\n  return [];\n}\n\n/**\n * @param {number} minArgs The minimum number of arguments.\n * @param {number} maxArgs The maximum number of arguments.\n * @return {ArgValidator} The argument validator\n */\nfunction hasArgsCount(minArgs, maxArgs) {\n  return function (encoded, returnType, context) {\n    const operation = encoded[0];\n    const argCount = encoded.length - 1;\n    if (minArgs === maxArgs) {\n      if (argCount !== minArgs) {\n        const plural = minArgs === 1 ? '' : 's';\n        throw new Error(\n          `expected ${minArgs} argument${plural} for ${operation}, got ${argCount}`,\n        );\n      }\n    } else if (argCount < minArgs || argCount > maxArgs) {\n      const range =\n        maxArgs === Infinity\n          ? `${minArgs} or more`\n          : `${minArgs} to ${maxArgs}`;\n      throw new Error(\n        `expected ${range} arguments for ${operation}, got ${argCount}`,\n      );\n    }\n  };\n}\n\n/**\n * @type {ArgValidator}\n */\nfunction withArgsOfReturnType(encoded, returnType, context) {\n  const argCount = encoded.length - 1;\n  /**\n   * @type {Array<Expression>}\n   */\n  const args = new Array(argCount);\n  for (let i = 0; i < argCount; ++i) {\n    const expression = parse(encoded[i + 1], returnType, context);\n    args[i] = expression;\n  }\n  return args;\n}\n\n/**\n * @param {number} argType The argument type.\n * @return {ArgValidator} The argument validator\n */\nfunction withArgsOfType(argType) {\n  return function (encoded, returnType, context) {\n    const argCount = encoded.length - 1;\n    /**\n     * @type {Array<Expression>}\n     */\n    const args = new Array(argCount);\n    for (let i = 0; i < argCount; ++i) {\n      const expression = parse(encoded[i + 1], argType, context);\n      args[i] = expression;\n    }\n    return args;\n  };\n}\n\n/**\n * @type {ArgValidator}\n */\nfunction hasOddArgs(encoded, returnType, context) {\n  const operation = encoded[0];\n  const argCount = encoded.length - 1;\n  if (argCount % 2 === 0) {\n    throw new Error(\n      `expected an odd number of arguments for ${operation}, got ${argCount} instead`,\n    );\n  }\n}\n\n/**\n * @type {ArgValidator}\n */\nfunction hasEvenArgs(encoded, returnType, context) {\n  const operation = encoded[0];\n  const argCount = encoded.length - 1;\n  if (argCount % 2 === 1) {\n    throw new Error(\n      `expected an even number of arguments for operation ${operation}, got ${argCount} instead`,\n    );\n  }\n}\n\n/**\n * @type ArgValidator\n */\nfunction withMatchArgs(encoded, returnType, context) {\n  const argsCount = encoded.length - 1;\n\n  const inputType = StringType | NumberType | BooleanType;\n\n  const input = parse(encoded[1], inputType, context);\n\n  const fallback = parse(encoded[encoded.length - 1], returnType, context);\n\n  const args = new Array(argsCount - 2);\n  for (let i = 0; i < argsCount - 2; i += 2) {\n    try {\n      const match = parse(encoded[i + 2], input.type, context);\n      args[i] = match;\n    } catch (err) {\n      throw new Error(\n        `failed to parse argument ${i + 1} of match expression: ${err.message}`,\n      );\n    }\n    try {\n      const output = parse(encoded[i + 3], fallback.type, context);\n      args[i + 1] = output;\n    } catch (err) {\n      throw new Error(\n        `failed to parse argument ${i + 2} of match expression: ${err.message}`,\n      );\n    }\n  }\n\n  return [input, ...args, fallback];\n}\n\n/**\n * @type ArgValidator\n */\nfunction withInterpolateArgs(encoded, returnType, context) {\n  const interpolationType = encoded[1];\n  /**\n   * @type {number}\n   */\n  let base;\n  switch (interpolationType[0]) {\n    case 'linear':\n      base = 1;\n      break;\n    case 'exponential':\n      const b = interpolationType[1];\n      if (typeof b !== 'number' || b <= 0) {\n        throw new Error(\n          `expected a number base for exponential interpolation` +\n            `, got ${JSON.stringify(b)} instead`,\n        );\n      }\n      base = b;\n      break;\n    default:\n      throw new Error(\n        `invalid interpolation type: ${JSON.stringify(interpolationType)}`,\n      );\n  }\n\n  const interpolation = new LiteralExpression(NumberType, base);\n\n  let input;\n  try {\n    input = parse(encoded[2], NumberType, context);\n  } catch (err) {\n    throw new Error(\n      `failed to parse argument 1 in interpolate expression: ${err.message}`,\n    );\n  }\n\n  const args = new Array(encoded.length - 3);\n  for (let i = 0; i < args.length; i += 2) {\n    try {\n      const stop = parse(encoded[i + 3], NumberType, context);\n      args[i] = stop;\n    } catch (err) {\n      throw new Error(\n        `failed to parse argument ${i + 2} for interpolate expression: ${err.message}`,\n      );\n    }\n    try {\n      const output = parse(encoded[i + 4], returnType, context);\n      args[i + 1] = output;\n    } catch (err) {\n      throw new Error(\n        `failed to parse argument ${i + 3} for interpolate expression: ${err.message}`,\n      );\n    }\n  }\n\n  return [interpolation, input, ...args];\n}\n\n/**\n * @type ArgValidator\n */\nfunction withCaseArgs(encoded, returnType, context) {\n  const fallback = parse(encoded[encoded.length - 1], returnType, context);\n\n  const args = new Array(encoded.length - 1);\n  for (let i = 0; i < args.length - 1; i += 2) {\n    try {\n      const condition = parse(encoded[i + 1], BooleanType, context);\n      args[i] = condition;\n    } catch (err) {\n      throw new Error(\n        `failed to parse argument ${i} of case expression: ${err.message}`,\n      );\n    }\n    try {\n      const output = parse(encoded[i + 2], fallback.type, context);\n      args[i + 1] = output;\n    } catch (err) {\n      throw new Error(\n        `failed to parse argument ${i + 1} of case expression: ${err.message}`,\n      );\n    }\n  }\n\n  args[args.length - 1] = fallback;\n  return args;\n}\n\n/**\n * @type ArgValidator\n */\nfunction withInArgs(encoded, returnType, context) {\n  let haystack = encoded[2];\n  if (!Array.isArray(haystack)) {\n    throw new Error(\n      `the second argument for the \"in\" operator must be an array`,\n    );\n  }\n  /**\n   * @type {number}\n   */\n  let needleType;\n  if (typeof haystack[0] === 'string') {\n    if (haystack[0] !== 'literal') {\n      throw new Error(\n        `for the \"in\" operator, a string array should be wrapped in a \"literal\" operator to disambiguate from expressions`,\n      );\n    }\n    if (!Array.isArray(haystack[1])) {\n      throw new Error(\n        `failed to parse \"in\" expression: the literal operator must be followed by an array`,\n      );\n    }\n    haystack = haystack[1];\n    needleType = StringType;\n  } else {\n    needleType = NumberType;\n  }\n\n  const args = new Array(haystack.length);\n  for (let i = 0; i < args.length; i++) {\n    try {\n      const arg = parse(haystack[i], needleType, context);\n      args[i] = arg;\n    } catch (err) {\n      throw new Error(\n        `failed to parse haystack item ${i} for \"in\" expression: ${err.message}`,\n      );\n    }\n  }\n\n  const needle = parse(encoded[1], needleType, context);\n  return [needle, ...args];\n}\n\n/**\n * @type ArgValidator\n */\nfunction withPaletteArgs(encoded, returnType, context) {\n  let index;\n  try {\n    index = parse(encoded[1], NumberType, context);\n  } catch (err) {\n    throw new Error(\n      `failed to parse first argument in palette expression: ${err.message}`,\n    );\n  }\n  const colors = encoded[2];\n  if (!Array.isArray(colors)) {\n    throw new Error('the second argument of palette must be an array');\n  }\n  const parsedColors = new Array(colors.length);\n  for (let i = 0; i < parsedColors.length; i++) {\n    let color;\n    try {\n      color = parse(colors[i], ColorType, context);\n    } catch (err) {\n      throw new Error(\n        `failed to parse color at index ${i} in palette expression: ${err.message}`,\n      );\n    }\n    if (!(color instanceof LiteralExpression)) {\n      throw new Error(\n        `the palette color at index ${i} must be a literal value`,\n      );\n    }\n    parsedColors[i] = color;\n  }\n  return [index, ...parsedColors];\n}\n\n/**\n * @param {Array<ArgValidator>} validators A chain of argument validators.  The last validator is expected\n * to return the parsed arguments.\n * @return {Parser} The parser.\n */\nfunction createCallExpressionParser(...validators) {\n  return function (encoded, returnType, context) {\n    const operator = encoded[0];\n\n    /**\n     * @type {Array<Expression>}\n     */\n    let args;\n    for (let i = 0; i < validators.length; i++) {\n      const parsed = validators[i](encoded, returnType, context);\n      if (i == validators.length - 1) {\n        if (!parsed) {\n          throw new Error(\n            'expected last argument validator to return the parsed args',\n          );\n        }\n        args = parsed;\n      }\n    }\n    return new CallExpression(returnType, operator, ...args);\n  };\n}\n\n/**\n * @param {Array} encoded The encoded expression.\n * @param {number} returnType The expected return type of the call expression.\n * @param {ParsingContext} context The parsing context.\n * @return {Expression} The parsed expression.\n */\nfunction parseCallExpression(encoded, returnType, context) {\n  const operator = encoded[0];\n\n  const parser = parsers[operator];\n  if (!parser) {\n    throw new Error(`unknown operator: ${operator}`);\n  }\n  return parser(encoded, returnType, context);\n}\n\n/**\n * Returns a simplified geometry type suited for the `geometry-type` operator\n * @param {import('../geom/Geometry.js').default|import('../render/Feature.js').default} geometry Geometry object\n * @return {'Point'|'LineString'|'Polygon'|''} Simplified geometry type; empty string of no geometry found\n */\nexport function computeGeometryType(geometry) {\n  if (!geometry) {\n    return '';\n  }\n  const type = geometry.getType();\n  switch (type) {\n    case 'Point':\n    case 'LineString':\n    case 'Polygon':\n      return type;\n    case 'MultiPoint':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n      return /** @type {'Point'|'LineString'|'Polygon'} */ (type.substring(5));\n    case 'Circle':\n      return 'Polygon';\n    case 'GeometryCollection':\n      return computeGeometryType(\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries()[0],\n      );\n    default:\n      return '';\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
