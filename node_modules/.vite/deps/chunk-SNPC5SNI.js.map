{
  "version": 3,
  "sources": ["../../ol/webgl/BaseTileRepresentation.js", "../../ol/webgl.js", "../../ol/webgl/Buffer.js", "../../ol/webgl/TileTexture.js", "../../ol/webgl/ContextEventType.js", "../../ol/webgl/PostProcessingPass.js", "../../ol/vec/mat4.js", "../../ol/webgl/Helper.js", "../../ol/renderer/webgl/Layer.js", "../../ol/renderer/webgl/TileLayerBase.js", "../../ol/renderer/webgl/TileLayer.js", "../../ol/webgl/PaletteTexture.js", "../../ol/expr/gpu.js", "../../ol/render/webgl/utils.js", "../../ol/style/flat.js", "../../ol/webgl/ShaderBuilder.js", "../../ol/webgl/styleparser.js", "../../ol/layer/WebGLTile.js"],
  "sourcesContent": ["/**\n * @module ol/webgl/BaseTileRepresentation\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\n\n/**\n * @typedef {import(\"../Tile.js\").default} BaseTileType\n */\n\n/**\n * @template {BaseTileType} TileType\n * @typedef {Object} TileRepresentationOptions\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n/**\n * @classdesc\n * Base class for representing a tile in a webgl context\n * @template {import(\"../Tile.js\").default} TileType\n * @abstract\n */\nclass BaseTileRepresentation extends EventTarget {\n  /**\n   * @param {TileRepresentationOptions<TileType>} options The tile representation options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @type {TileType}\n     */\n    this.tile;\n\n    /**\n     * @private\n     */\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.gutter = options.gutter || 0;\n\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @protected\n     */\n    this.helper = options.helper;\n\n    this.loaded = false;\n    this.ready = false;\n  }\n\n  /**\n   * @param {TileType} tile Tile.\n   */\n  setTile(tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n      this.tile = tile;\n      this.loaded = tile.getState() === TileState.LOADED;\n      if (this.loaded) {\n        this.uploadTile();\n      } else {\n        if (tile instanceof ImageTile) {\n          const image = tile.getImage();\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  }\n\n  /**\n   * @abstract\n   * @protected\n   */\n  uploadTile() {\n    abstract();\n  }\n\n  setReady() {\n    this.ready = true;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  handleTileChange_() {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    this.helper = helper;\n    if (this.helper && this.loaded) {\n      this.uploadTile();\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    this.setHelper(null);\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  }\n}\n\nexport default BaseTileRepresentation;\n", "/**\n * @module ol/webgl\n */\n\nimport {SAFARI_BUG_237906} from './has.js';\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport const ARRAY_BUFFER = 0x8892;\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport const ELEMENT_ARRAY_BUFFER = 0x8893;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STREAM_DRAW = 0x88e0;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const STATIC_DRAW = 0x88e4;\n\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport const DYNAMIC_DRAW = 0x88e8;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_BYTE = 0x1401;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_SHORT = 0x1403;\n\n/**\n * @const\n * @type {number}\n */\nexport const UNSIGNED_INT = 0x1405;\n\n/**\n * @const\n * @type {number}\n */\nexport const FLOAT = 0x1406;\n\n/** end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [attributes] Attributes.\n * @return {WebGLRenderingContext|null} WebGL rendering context.\n */\nexport function getContext(canvas, attributes) {\n  attributes = Object.assign(\n    {\n      preserveDrawingBuffer: true,\n      antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    },\n    attributes,\n  );\n  const ii = CONTEXT_IDS.length;\n  for (let i = 0; i < ii; ++i) {\n    try {\n      const context = canvas.getContext(CONTEXT_IDS[i], attributes);\n      if (context) {\n        return /** @type {!WebGLRenderingContext} */ (context);\n      }\n    } catch (e) {\n      // pass\n    }\n  }\n  return null;\n}\n\n/**\n * @type {Array<string>|null}\n */\nlet supportedExtensions = null;\n\n/**\n * @return {Array<string>|null} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    const canvas = document.createElement('canvas');\n    const gl = getContext(canvas);\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n  return supportedExtensions;\n}\n", "/**\n * @module ol/webgl/Buffer\n */\nimport {\n  ARRAY_BUFFER,\n  DYNAMIC_DRAW,\n  ELEMENT_ARRAY_BUFFER,\n  STATIC_DRAW,\n  STREAM_DRAW,\n} from '../webgl.js';\nimport {assert} from '../asserts.js';\n\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport const BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n */\nclass WebGLArrayBuffer {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `STATIC_DRAW`.\n   */\n  constructor(type, usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array|null}\n     */\n    this.array_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.type_ = type;\n\n    assert(\n      type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER,\n      'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.usage_ = usage !== undefined ? usage : BufferUsage.STATIC_DRAW;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   * @return {WebGLArrayBuffer} This\n   */\n  ofSize(size) {\n    this.array_ = new (getArrayClassForType(this.type_))(size);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with an array of the given size.\n   * @param {Array<number>} array Numerical array\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArray(array) {\n    this.array_ = getArrayClassForType(this.type_).from(array);\n    return this;\n  }\n\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   * @return {WebGLArrayBuffer} This\n   */\n  fromArrayBuffer(buffer) {\n    this.array_ = new (getArrayClassForType(this.type_))(buffer);\n    return this;\n  }\n\n  /**\n   * @return {number} Buffer type.\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array|null} Array.\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * @param {Float32Array|Uint32Array} array Array.\n   */\n  setArray(array) {\n    const ArrayType = getArrayClassForType(this.type_);\n    if (!(array instanceof ArrayType)) {\n      throw new Error(`Expected ${ArrayType}`);\n    }\n    this.array_ = array;\n  }\n\n  /**\n   * @return {number} Usage.\n   */\n  getUsage() {\n    return this.usage_;\n  }\n\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n  getSize() {\n    return this.array_ ? this.array_.length : 0;\n  }\n}\n\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n    default:\n      return Float32Array;\n  }\n}\n\nexport default WebGLArrayBuffer;\n", "/**\n * @module ol/webgl/TileTexture\n */\n\nimport BaseTileRepresentation from './BaseTileRepresentation.js';\nimport DataTile, {asArrayLike, asImageLike} from '../DataTile.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport {ARRAY_BUFFER, STATIC_DRAW} from '../webgl.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {toSize} from '../size.js';\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction bindAndConfigure(gl, texture, interpolate) {\n  const resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ImageLike} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").ArrayLike} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\nfunction uploadDataTexture(\n  helper,\n  texture,\n  data,\n  size,\n  bandCount,\n  interpolate,\n) {\n  const gl = helper.getGL();\n  let textureType;\n  let canInterpolate;\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    const extension = helper.getExtension('OES_texture_float_linear');\n    canInterpolate = extension !== null;\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n    canInterpolate = true;\n  }\n  bindAndConfigure(gl, texture, interpolate && canInterpolate);\n\n  const bytesPerRow = data.byteLength / size[1];\n  let unpackAlignment = 1;\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  let format;\n  switch (bandCount) {\n    case 1: {\n      format = gl.LUMINANCE;\n      break;\n    }\n    case 2: {\n      format = gl.LUMINANCE_ALPHA;\n      break;\n    }\n    case 3: {\n      format = gl.RGB;\n      break;\n    }\n    case 4: {\n      format = gl.RGBA;\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported number of bands: ${bandCount}`);\n    }\n  }\n\n  const oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    size[0],\n    size[1],\n    0,\n    format,\n    textureType,\n    data,\n  );\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @extends {BaseTileRepresentation<TileType>}\n */\nclass TileTexture extends BaseTileRepresentation {\n  /**\n   * @param {import(\"./BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options The tile texture options.\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n    this.textures = [];\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.renderSize_ = toSize(\n      options.grid.getTileSize(options.tile.tileCoord[0]),\n    );\n\n    /**\n     * @type {number}\n     */\n    this.bandCount = NaN;\n\n    const coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([\n      0, // P0\n      1,\n      1, // P1\n      1,\n      1, // P2\n      0,\n      0, // P3\n      0,\n    ]);\n    this.helper.flushBufferData(coords);\n\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n    this.coords = coords;\n\n    this.setTile(options.tile);\n  }\n\n  /**\n   * @override\n   * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n   */\n  setHelper(helper) {\n    const gl = this.helper?.getGL();\n    if (gl) {\n      this.helper.deleteBuffer(this.coords);\n      for (let i = 0; i < this.textures.length; ++i) {\n        gl.deleteTexture(this.textures[i]);\n      }\n    }\n\n    super.setHelper(helper);\n\n    if (helper) {\n      helper.flushBufferData(this.coords);\n    }\n  }\n\n  /**\n   * @override\n   */\n  uploadTile() {\n    const helper = this.helper;\n    const gl = helper.getGL();\n    const tile = this.tile;\n\n    this.textures.length = 0;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     */\n    let data;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      data = tile.getImage();\n    } else {\n      data = tile.getData();\n    }\n\n    const image = asImageLike(data);\n    if (image) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      this.setReady();\n      return;\n    }\n\n    data = asArrayLike(data);\n\n    const sourceTileSize = /** @type {DataTile} */ (tile).getSize();\n    const pixelSize = [\n      sourceTileSize[0] + 2 * this.gutter,\n      sourceTileSize[1] + 2 * this.gutter,\n    ];\n    const isFloat = data instanceof Float32Array;\n    const pixelCount = pixelSize[0] * pixelSize[1];\n    const DataType = isFloat ? Float32Array : Uint8Array;\n    const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    const bytesPerRow = data.byteLength / pixelSize[1];\n\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    const textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(\n        helper,\n        texture,\n        data,\n        pixelSize,\n        this.bandCount,\n        tile.interpolate,\n      );\n      this.setReady();\n      return;\n    }\n\n    const textureDataArrays = new Array(textureCount);\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = gl.createTexture();\n      this.textures.push(texture);\n\n      const bandCount =\n        textureIndex < textureCount - 1 ? 4 : ((this.bandCount - 1) % 4) + 1;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    let dataIndex = 0;\n    let rowOffset = 0;\n    const colCount = pixelSize[0] * this.bandCount;\n    for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\n        const dataValue = data[rowOffset + colIndex];\n\n        const pixelIndex = Math.floor(dataIndex / this.bandCount);\n        const bandIndex = colIndex % this.bandCount;\n        const textureIndex = Math.floor(bandIndex / 4);\n        const textureData = textureDataArrays[textureIndex];\n        const bandCount = textureData.length / pixelCount;\n        const textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n\n        ++dataIndex;\n      }\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (let textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      const texture = this.textures[textureIndex];\n      const textureData = textureDataArrays[textureIndex];\n      const bandCount = textureData.length / pixelCount;\n      uploadDataTexture(\n        helper,\n        texture,\n        textureData,\n        pixelSize,\n        bandCount,\n        tile.interpolate,\n      );\n    }\n\n    this.setReady();\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ImageLike} image The image.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {Uint8ClampedArray|null} The data.\n   * @private\n   */\n  getImagePixelData_(image, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    const sourceWidth = image.width;\n    const sourceHeight = image.height;\n\n    const sourceWidthWithoutGutter = sourceWidth - 2 * gutter;\n    const sourceHeightWithoutGutter = sourceHeight - 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    let data;\n    try {\n      pixelContext.drawImage(image, sourceCol, sourceRow, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import(\"../DataTile.js\").ArrayLike} data The data.\n   * @param {import(\"../size.js\").Size} sourceSize The size.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   * @private\n   */\n  getArrayPixelData_(data, sourceSize, renderCol, renderRow) {\n    const gutter = this.gutter;\n    const renderWidth = this.renderSize_[0];\n    const renderHeight = this.renderSize_[1];\n\n    const sourceWidthWithoutGutter = sourceSize[0];\n    const sourceHeightWithoutGutter = sourceSize[1];\n    const sourceWidth = sourceWidthWithoutGutter + 2 * gutter;\n    const sourceHeight = sourceHeightWithoutGutter + 2 * gutter;\n\n    const sourceCol =\n      gutter + Math.floor(sourceWidthWithoutGutter * (renderCol / renderWidth));\n\n    const sourceRow =\n      gutter +\n      Math.floor(sourceHeightWithoutGutter * (renderRow / renderHeight));\n\n    if (data instanceof DataView) {\n      const bytesPerPixel = data.byteLength / (sourceWidth * sourceHeight);\n      const offset = bytesPerPixel * (sourceRow * sourceWidth + sourceCol);\n      const buffer = data.buffer.slice(offset, offset + bytesPerPixel);\n      return new DataView(buffer);\n    }\n\n    const offset = this.bandCount * (sourceRow * sourceWidth + sourceCol);\n    return data.slice(offset, offset + this.bandCount);\n  }\n\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} renderCol The column index (in rendered tile space).\n   * @param {number} renderRow The row index (in rendered tile space).\n   * @return {import(\"../DataTile.js\").ArrayLike|null} The data.\n   */\n  getPixelData(renderCol, renderRow) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    if (this.tile instanceof DataTile) {\n      const data = this.tile.getData();\n      const arrayData = asArrayLike(data);\n      if (arrayData) {\n        const sourceSize = this.tile.getSize();\n        return this.getArrayPixelData_(\n          arrayData,\n          sourceSize,\n          renderCol,\n          renderRow,\n        );\n      }\n      return this.getImagePixelData_(asImageLike(data), renderCol, renderRow);\n    }\n\n    return this.getImagePixelData_(this.tile.getImage(), renderCol, renderRow);\n  }\n}\n\nexport default TileTexture;\n", "/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored',\n};\n", "/**\n * @module ol/webgl/PostProcessingPass\n */\n\nimport {getUid} from '../util.js';\n\nconst DEFAULT_VERTEX_SHADER = `\n  precision mediump float;\n\n  attribute vec2 a_position;\n  varying vec2 v_texCoord;\n  varying vec2 v_screenCoord;\n\n  uniform vec2 u_screenSize;\n\n  void main() {\n    v_texCoord = a_position * 0.5 + 0.5;\n    v_screenCoord = v_texCoord * u_screenSize;\n    gl_Position = vec4(a_position, 0.0, 1.0);\n  }\n`;\n\nconst DEFAULT_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform sampler2D u_image;\n  uniform float u_opacity;\n\n  varying vec2 v_texCoord;\n\n  void main() {\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n  }\n`;\n\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {WebGLUniformLocation} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n */\nclass WebGLPostProcessingPass {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     */\n    this.gl_ = options.webGlContext;\n    const gl = this.gl_;\n\n    /**\n     * @private\n     */\n    this.scaleRatio_ = options.scaleRatio || 1;\n\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n    this.renderTargetTexture_ = gl.createTexture();\n\n    /**\n     * @type {import('../size.js').Size|null}\n     * @private\n     */\n    this.renderTargetTextureSize_ = null;\n\n    /**\n     * @private\n     */\n    this.frameBuffer_ = gl.createFramebuffer();\n    /**\n     * @private\n     */\n    this.depthBuffer_ = gl.createRenderbuffer();\n\n    // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(\n      vertexShader,\n      options.vertexShader || DEFAULT_VERTEX_SHADER,\n    );\n    gl.compileShader(vertexShader);\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(\n      fragmentShader,\n      options.fragmentShader || DEFAULT_FRAGMENT_SHADER,\n    );\n    gl.compileShader(fragmentShader);\n    /**\n     * @private\n     */\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_);\n\n    // bind the vertices buffer for the frame buffer\n    /**\n     * @private\n     */\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    const verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(verticesArray),\n      gl.STATIC_DRAW,\n    );\n\n    /**\n     * @private\n     */\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(\n      this.renderTargetProgram_,\n      'a_position',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_screenSize',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_opacity',\n    );\n    /**\n     * @private\n     */\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(\n      this.renderTargetProgram_,\n      'u_image',\n    );\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    options.uniforms &&\n      Object.keys(options.uniforms).forEach((name) => {\n        this.uniforms_.push({\n          value: options.uniforms[name],\n          location: gl.getUniformLocation(this.renderTargetProgram_, name),\n        });\n      });\n  }\n\n  getRenderTargetTexture() {\n    return this.renderTargetTexture_;\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   */\n  init(frameState) {\n    const gl = this.getGL();\n    const textureSize = [\n      gl.drawingBufferWidth * this.scaleRatio_,\n      gl.drawingBufferHeight * this.scaleRatio_,\n    ];\n\n    // rendering goes to my buffer\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.getDepthBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]);\n\n    // if size has changed: adjust canvas & render target texture\n    if (\n      !this.renderTargetTextureSize_ ||\n      this.renderTargetTextureSize_[0] !== textureSize[0] ||\n      this.renderTargetTextureSize_[1] !== textureSize[1]\n    ) {\n      this.renderTargetTextureSize_ = textureSize;\n\n      // create a new texture\n      const level = 0;\n      const internalFormat = gl.RGBA;\n      const border = 0;\n      const format = gl.RGBA;\n      const type = gl.UNSIGNED_BYTE;\n      const data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        textureSize[0],\n        textureSize[1],\n        border,\n        format,\n        type,\n        data,\n      );\n\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n      // bind the texture to the framebuffer\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        this.renderTargetTexture_,\n        0,\n      );\n\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        gl.DEPTH_COMPONENT16,\n        textureSize[0],\n        textureSize[1],\n      );\n      gl.framebufferRenderbuffer(\n        gl.FRAMEBUFFER,\n        gl.DEPTH_ATTACHMENT,\n        gl.RENDERBUFFER,\n        this.depthBuffer_,\n      );\n    }\n  }\n\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  apply(frameState, nextPass, preCompose, postCompose) {\n    const gl = this.getGL();\n    const size = frameState.size;\n\n    gl.bindFramebuffer(\n      gl.FRAMEBUFFER,\n      nextPass ? nextPass.getFrameBuffer() : null,\n    );\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      const canvasId = getUid(gl.canvas);\n      if (!frameState.renderTargets[canvasId]) {\n        const attributes = gl.getContextAttributes();\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clearDepth(1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.disable(gl.DEPTH_TEST);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(\n      this.renderTargetAttribLocation_,\n      2,\n      gl.FLOAT,\n      false,\n      0,\n      0,\n    );\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n\n    const opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   */\n  getFrameBuffer() {\n    return this.frameBuffer_;\n  }\n\n  /**\n   * @return {WebGLRenderbuffer} Depth buffer\n   */\n  getDepthBuffer() {\n    return this.depthBuffer_;\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  applyUniforms(frameState) {\n    const gl = this.getGL();\n\n    let value;\n    let textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n        gl.activeTexture(gl[`TEXTURE${textureSlot}`]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            value.width,\n            value.height,\n            0,\n            gl.UNSIGNED_BYTE,\n            new Uint8Array(value.data),\n          );\n        } else {\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n\n        // fill texture slots\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n          case 4:\n            gl.uniform4f(\n              uniform.location,\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  }\n}\n\nexport default WebGLPostProcessingPass;\n", "/**\n * @module ol/vec/mat4\n */\n\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}\n", "/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport {\n  FLOAT,\n  UNSIGNED_BYTE,\n  UNSIGNED_INT,\n  UNSIGNED_SHORT,\n  getContext,\n} from '../webgl.js';\nimport {clear} from '../obj.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {create, fromTransform} from '../vec/mat4.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport const ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31,\n};\n\n/**\n * Names of uniforms made available to all shaders.\n * Please note: changing these *will* break custom shaders!\n * @enum {string}\n */\nexport const DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution',\n  ROTATION: 'u_rotation',\n  VIEWPORT_SIZE_PX: 'u_viewportSizePx',\n  PIXEL_RATIO: 'u_pixelRatio',\n  HIT_DETECTION: 'u_hitDetection',\n};\n\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport const AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT,\n};\n\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|WebGLTexture|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../Map.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {UniformValue} [prevValue] The previous value.\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {WebGLRenderingContext} context The context of this canvas.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nconst canvasCache = {};\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nlet uniqueCanvasCacheKeyCount = 0;\n\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n  const key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n * @return {WebGLRenderingContext} The canvas.\n */\nfunction getOrCreateContext(key) {\n  let cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    const context = getContext(canvas);\n    cacheItem = {users: 0, context};\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.context;\n}\n\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n  const cacheItem = canvasCache[key];\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  const gl = cacheItem.context;\n  const extension = gl.getExtension('WEBGL_lose_context');\n  if (extension) {\n    extension.loseContext();\n  }\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n\n  delete canvasCache[key];\n}\n\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls; note how a frameState is required to set up a program,\n *   // as several default uniforms are computed from it (projection matrix, zoom level, etc.)\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program, frameState);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n */\nclass WebGLHelper extends Disposable {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n    options = options || {};\n\n    /** @private */\n    this.boundHandleWebGLContextLost_ = this.handleWebGLContextLost.bind(this);\n\n    /** @private */\n    this.boundHandleWebGLContextRestored_ =\n      this.handleWebGLContextRestored.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.canvasCacheKey_ = options.canvasCacheKey\n      ? getSharedCanvasCacheKey(options.canvasCacheKey)\n      : getUniqueCanvasCacheKey();\n\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = getOrCreateContext(this.canvasCacheKey_);\n\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n    this.bufferCache_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n    this.extensionCache_ = {};\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.currentProgram_ = null;\n\n    /**\n     * @private\n     * @type boolean\n     */\n    this.needsToBeRecreated_ = false;\n\n    const canvas = this.gl_.canvas;\n\n    canvas.addEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.addEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetRotateMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n    this.offsetScaleMatrix_ = createTransform();\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.tmpMat4_ = create();\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, WebGLUniformLocation>>}\n     */\n    this.uniformLocationsByProgram_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.attribLocationsByProgram_ = {};\n\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n    this.uniforms_ = [];\n    if (options.uniforms) {\n      this.setUniforms(options.uniforms);\n    }\n\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n    this.postProcessPasses_ = options.postProcesses\n      ? options.postProcesses.map(\n          (options) =>\n            new WebGLPostProcessingPass({\n              webGlContext: this.gl_,\n              scaleRatio: options.scaleRatio,\n              vertexShader: options.vertexShader,\n              fragmentShader: options.fragmentShader,\n              uniforms: options.uniforms,\n            }),\n        )\n      : [new WebGLPostProcessingPass({webGlContext: this.gl_})];\n\n    /**\n     * @type {string|null}\n     * @private\n     */\n    this.shaderCompileErrors_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.startTime_ = Date.now();\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  setUniforms(uniforms) {\n    this.uniforms_ = [];\n    this.addUniforms(uniforms);\n  }\n\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n  addUniforms(uniforms) {\n    for (const name in uniforms) {\n      this.uniforms_.push({\n        name: name,\n        value: uniforms[name],\n      });\n    }\n  }\n\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n  canvasCacheKeyMatches(canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  }\n\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n  getExtension(name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n    const extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  }\n\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  bindBuffer(buffer) {\n    const gl = this.gl_;\n    const bufferKey = getUid(buffer);\n    let bufferCache = this.bufferCache_[bufferKey];\n    if (!bufferCache) {\n      const webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer,\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  }\n\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   */\n  flushBufferData(buffer) {\n    const gl = this.gl_;\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  }\n\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n  deleteBuffer(buf) {\n    const bufferKey = getUid(buf);\n    // Note: gl.deleteBuffer is not called here since we let WebGL garbage collect it automatically\n    delete this.bufferCache_[bufferKey];\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const canvas = this.gl_.canvas;\n    canvas.removeEventListener(\n      ContextEventType.LOST,\n      this.boundHandleWebGLContextLost_,\n    );\n    canvas.removeEventListener(\n      ContextEventType.RESTORED,\n      this.boundHandleWebGLContextRestored_,\n    );\n\n    releaseCanvas(this.canvasCacheKey_);\n\n    delete this.gl_;\n  }\n\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDraw(frameState, disableAlphaBlend, enableDepth) {\n    const gl = this.gl_;\n    const canvas = this.getCanvas();\n    const size = frameState.size;\n    const pixelRatio = frameState.pixelRatio;\n\n    if (\n      canvas.width !== size[0] * pixelRatio ||\n      canvas.height !== size[1] * pixelRatio\n    ) {\n      canvas.width = size[0] * pixelRatio;\n      canvas.height = size[1] * pixelRatio;\n      canvas.style.width = size[0] + 'px';\n      canvas.style.height = size[1] + 'px';\n    }\n\n    // loop backwards in post processes list\n    for (let i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * @param {WebGLFramebuffer|null} frameBuffer The frame buffer.\n   * @param {WebGLTexture} [texture] The texture.\n   */\n  bindFrameBuffer(frameBuffer, texture) {\n    const gl = this.getGL();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    if (texture) {\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0,\n      );\n    }\n  }\n\n  /**\n   * Bind the frame buffer from the initial render.\n   */\n  bindInitialFrameBuffer() {\n    const gl = this.getGL();\n    const frameBuffer = this.postProcessPasses_[0].getFrameBuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    const texture = this.postProcessPasses_[0].getRenderTargetTexture();\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0,\n    );\n  }\n\n  /**\n   * Prepare a program to use a texture.\n   * @param {WebGLTexture} texture The texture.\n   * @param {number} slot The texture slot.\n   * @param {string} uniformName The corresponding uniform name.\n   */\n  bindTexture(texture, slot, uniformName) {\n    const gl = this.gl_;\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.uniform1i(this.getUniformLocation(uniformName), slot);\n  }\n\n  /**\n   * Set up an attribute array buffer for use in the vertex shader.\n   * @param {import(\"./Buffer\").default} buffer The buffer.\n   * @param {string} attributeName The attribute name.\n   * @param {number} size The number of components per attribute vertex.\n   */\n  bindAttribute(buffer, attributeName, size) {\n    const gl = this.getGL();\n    this.bindBuffer(buffer);\n    const index = this.getAttributeLocation(attributeName);\n    gl.enableVertexAttribArray(index);\n    gl.vertexAttribPointer(index, size, gl.FLOAT, false, 0, 0);\n  }\n\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [disableAlphaBlend] If true, no alpha blending will happen.\n   * @param {boolean} [enableDepth] If true, enables depth testing.\n   */\n  prepareDrawToRenderTarget(\n    frameState,\n    renderTarget,\n    disableAlphaBlend,\n    enableDepth,\n  ) {\n    const gl = this.gl_;\n    const size = renderTarget.getSize();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderTarget.getDepthbuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.depthRange(0.0, 1.0);\n    gl.clearDepth(1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    if (enableDepth) {\n      gl.enable(gl.DEPTH_TEST);\n      gl.depthFunc(gl.LEQUAL);\n    } else {\n      gl.disable(gl.DEPTH_TEST);\n    }\n  }\n\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   */\n  drawElements(start, end) {\n    const gl = this.gl_;\n    this.getExtension('OES_element_index_uint');\n\n    const elementType = gl.UNSIGNED_INT;\n    const elementSize = 4;\n\n    const numItems = end - start;\n    const offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  }\n\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../Map.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../Map.js\").FrameState):void} [postCompose] Called before composing.\n   */\n  finalizeDraw(frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (let i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          null,\n          preCompose,\n          postCompose,\n        );\n      } else {\n        this.postProcessPasses_[i].apply(\n          frameState,\n          this.postProcessPasses_[i + 1],\n        );\n      }\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getCanvas() {\n    return /** @type {HTMLCanvasElement} */ (this.gl_.canvas);\n  }\n\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   */\n  getGL() {\n    return this.gl_;\n  }\n\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyFrameState(frameState) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    this.setUniformFloatValue(\n      DefaultUniform.TIME,\n      (Date.now() - this.startTime_) * 0.001,\n    );\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(\n      DefaultUniform.RESOLUTION,\n      frameState.viewState.resolution,\n    );\n    this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, pixelRatio);\n    this.setUniformFloatVec2(DefaultUniform.VIEWPORT_SIZE_PX, [\n      size[0],\n      size[1],\n    ]);\n    this.setUniformFloatValue(DefaultUniform.ROTATION, rotation);\n  }\n\n  /**\n   * Sets the `u_hitDetection` uniform.\n   * @param {boolean} enabled Whether to enable the hit detection code path\n   */\n  applyHitDetectionUniform(enabled) {\n    const loc = this.getUniformLocation(DefaultUniform.HIT_DETECTION);\n    this.getGL().uniform1i(loc, enabled ? 1 : 0);\n\n    // hit detection uses a fixed pixel ratio\n    if (enabled) {\n      this.setUniformFloatValue(DefaultUniform.PIXEL_RATIO, 0.5);\n    }\n  }\n\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  applyUniforms(frameState) {\n    const gl = this.gl_;\n\n    let value;\n    let textureSlot = 0;\n    this.uniforms_.forEach((uniform) => {\n      value =\n        typeof uniform.value === 'function'\n          ? uniform.value(frameState)\n          : uniform.value;\n\n      // apply value based on type\n      if (\n        value instanceof HTMLCanvasElement ||\n        value instanceof HTMLImageElement ||\n        value instanceof ImageData ||\n        value instanceof WebGLTexture\n      ) {\n        // create a texture & put data\n        if (value instanceof WebGLTexture && !uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = value;\n        } else if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n        this.bindTexture(uniform.texture, textureSlot, uniform.name);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        const imageReady =\n          !(value instanceof HTMLImageElement) ||\n          /** @type {HTMLImageElement} */ (value).complete;\n        if (\n          !(value instanceof WebGLTexture) &&\n          imageReady &&\n          uniform.prevValue !== value\n        ) {\n          uniform.prevValue = value;\n          gl.texImage2D(\n            gl.TEXTURE_2D,\n            0,\n            gl.RGBA,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            value,\n          );\n        }\n        textureSlot++;\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(\n          uniform.name,\n          fromTransform(this.tmpMat4_, value),\n        );\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n            );\n            return;\n          case 3:\n            gl.uniform3f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n            );\n            return;\n          case 4:\n            gl.uniform4f(\n              this.getUniformLocation(uniform.name),\n              value[0],\n              value[1],\n              value[2],\n              value[3],\n            );\n            return;\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    });\n  }\n\n  /**\n   * Set up a program for use. The program will be set as the current one. Then, the uniforms used\n   * in the program will be set based on the current frame state and the helper configuration.\n   * @param {WebGLProgram} program Program.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   */\n  useProgram(program, frameState) {\n    const gl = this.gl_;\n    gl.useProgram(program);\n    this.currentProgram_ = program;\n    if (frameState) {\n      this.applyFrameState(frameState);\n      this.applyUniforms(frameState);\n    }\n  }\n\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n  compileShader(source, type) {\n    const gl = this.gl_;\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  }\n\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   */\n  getProgram(fragmentShaderSource, vertexShaderSource) {\n    const gl = this.gl_;\n\n    const fragmentShader = this.compileShader(\n      fragmentShaderSource,\n      gl.FRAGMENT_SHADER,\n    );\n\n    const vertexShader = this.compileShader(\n      vertexShaderSource,\n      gl.VERTEX_SHADER,\n    );\n\n    const program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      const message = `Fragment shader compilation failed: ${gl.getShaderInfoLog(\n        fragmentShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      const message = `Vertex shader compilation failed: ${gl.getShaderInfoLog(\n        vertexShader,\n      )}`;\n      throw new Error(message);\n    }\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      const message = `GL program linking failed: ${gl.getProgramInfoLog(\n        program,\n      )}`;\n      throw new Error(message);\n    }\n\n    return program;\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   */\n  getUniformLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.uniformLocationsByProgram_[programUid] === undefined) {\n      this.uniformLocationsByProgram_[programUid] = {};\n    }\n    if (this.uniformLocationsByProgram_[programUid][name] === undefined) {\n      this.uniformLocationsByProgram_[programUid][name] =\n        this.gl_.getUniformLocation(this.currentProgram_, name);\n    }\n    return this.uniformLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   */\n  getAttributeLocation(name) {\n    const programUid = getUid(this.currentProgram_);\n    if (this.attribLocationsByProgram_[programUid] === undefined) {\n      this.attribLocationsByProgram_[programUid] = {};\n    }\n    if (this.attribLocationsByProgram_[programUid][name] === undefined) {\n      this.attribLocationsByProgram_[programUid][name] =\n        this.gl_.getAttribLocation(this.currentProgram_, name);\n    }\n    return this.attribLocationsByProgram_[programUid][name];\n  }\n\n  /**\n   * Sets the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates in the [-1, 1] range.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   */\n  makeProjectionTransform(frameState, transform) {\n    const size = frameState.size;\n    const rotation = frameState.viewState.rotation;\n    const resolution = frameState.viewState.resolution;\n    const center = frameState.viewState.center;\n    composeTransform(\n      transform,\n      0,\n      0,\n      2 / (resolution * size[0]),\n      2 / (resolution * size[1]),\n      -rotation,\n      -center[0],\n      -center[1],\n    );\n    return transform;\n  }\n\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   */\n  setUniformFloatValue(uniform, value) {\n    this.gl_.uniform1f(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec2 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec2(uniform, value) {\n    this.gl_.uniform2fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n  setUniformFloatVec4(uniform, value) {\n    this.gl_.uniform4fv(this.getUniformLocation(uniform), value);\n  }\n\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   */\n  setUniformMatrixValue(uniform, value) {\n    this.gl_.uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  }\n\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n  enableAttributeArray_(attribName, size, type, stride, offset) {\n    const location = this.getAttributeLocation(attribName);\n    // the attribute has not been found in the shaders or is not used; do not enable it\n    if (location < 0) {\n      return;\n    }\n    this.gl_.enableVertexAttribArray(location);\n    this.gl_.vertexAttribPointer(location, size, type, false, stride, offset);\n  }\n\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   */\n  enableAttributes(attributes) {\n    const stride = computeAttributesStride(attributes);\n    let offset = 0;\n    for (let i = 0; i < attributes.length; i++) {\n      const attr = attributes[i];\n      this.enableAttributeArray_(\n        attr.name,\n        attr.size,\n        attr.type || FLOAT,\n        stride,\n        offset,\n      );\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  }\n\n  /**\n   * WebGL context was lost\n   * @param {WebGLContextEvent} event The context loss event.\n   * @private\n   */\n  handleWebGLContextLost(event) {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n\n    event.preventDefault();\n  }\n\n  /**\n   * WebGL context was restored\n   * @private\n   */\n  handleWebGLContextRestored() {\n    this.needsToBeRecreated_ = true;\n  }\n\n  /**\n   * Returns whether this helper needs to be recreated, as the context was lost and then restored.\n   * @return {boolean} Whether this helper needs to be recreated.\n   */\n  needsToBeRecreated() {\n    return this.needsToBeRecreated_;\n  }\n\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.  If a Uint8Array is provided for data, a size must also be provided.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement|Uint8Array|null} data Image data/object to bind to the texture\n   * @param {WebGLTexture} [texture] Existing texture to reuse\n   * @param {boolean} [nearest] Use gl.NEAREST for min/mag filter.\n   * @return {WebGLTexture} The generated texture\n   */\n  createTexture(size, data, texture, nearest) {\n    const gl = this.gl_;\n    texture = texture || gl.createTexture();\n    const filter = nearest ? gl.NEAREST : gl.LINEAR;\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n    const level = 0;\n    const internalFormat = gl.RGBA;\n    const border = 0;\n    const format = gl.RGBA;\n    const type = gl.UNSIGNED_BYTE;\n\n    if (data instanceof Uint8Array) {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        data,\n      );\n    } else if (data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, data);\n    } else {\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        level,\n        internalFormat,\n        size[0],\n        size[1],\n        border,\n        format,\n        type,\n        null,\n      );\n    }\n    return texture;\n  }\n}\n\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n */\nexport function computeAttributesStride(attributes) {\n  let stride = 0;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n  return stride;\n}\n\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;\n", "/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass WebGLLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   * @param {Options} [options] Options.\n   */\n  constructor(layer, options) {\n    super(layer);\n\n    options = options || {};\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n     * set before dispatching rendering events.\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform_ = createTransform();\n\n    /**\n     * @private\n     */\n    this.postProcesses_ = options.postProcesses;\n\n    /**\n     * @private\n     */\n    this.uniforms_ = options.uniforms;\n\n    /**\n     * @type {WebGLHelper}\n     * @protected\n     */\n    this.helper;\n\n    this.onMapChanged_ = () => {\n      this.clearCache();\n      this.removeHelper();\n    };\n\n    layer.addChangeListener(LayerProperty.MAP, this.onMapChanged_);\n\n    this.dispatchPreComposeEvent = this.dispatchPreComposeEvent.bind(this);\n    this.dispatchPostComposeEvent = this.dispatchPostComposeEvent.bind(this);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPreComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.PRECOMPOSE,\n        undefined,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  dispatchPostComposeEvent(context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n      const event = new RenderEvent(\n        RenderEventType.POSTCOMPOSE,\n        undefined,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Reset options (only handles uniforms).\n   * @param {Options} options Options.\n   */\n  reset(options) {\n    this.uniforms_ = options.uniforms;\n    if (this.helper) {\n      this.helper.setUniforms(this.uniforms_);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  removeHelper() {\n    if (this.helper) {\n      this.helper.dispose();\n      delete this.helper;\n    }\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    if (this.getLayer().getRenderSource()) {\n      let incrementGroup = true;\n      let groupNumber = -1;\n      let className;\n      for (let i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n        const layer = frameState.layerStatesArray[i].layer;\n        const renderer = layer.getRenderer();\n        if (!(renderer instanceof WebGLLayerRenderer)) {\n          incrementGroup = true;\n          continue;\n        }\n        const layerClassName = layer.getClassName();\n        if (incrementGroup || layerClassName !== className) {\n          groupNumber += 1;\n          incrementGroup = false;\n        }\n        className = layerClassName;\n        if (renderer === this) {\n          break;\n        }\n      }\n\n      const canvasCacheKey =\n        'map/' + frameState.mapId + '/group/' + groupNumber;\n\n      if (\n        !this.helper ||\n        !this.helper.canvasCacheKeyMatches(canvasCacheKey) ||\n        this.helper.needsToBeRecreated()\n      ) {\n        this.removeHelper();\n\n        this.helper = new WebGLHelper({\n          postProcesses: this.postProcesses_,\n          uniforms: this.uniforms_,\n          canvasCacheKey: canvasCacheKey,\n        });\n\n        if (className) {\n          this.helper.getCanvas().className = className;\n        }\n\n        this.afterHelperCreated();\n      }\n    }\n\n    return this.prepareFrameInternal(frameState);\n  }\n\n  /**\n   * @protected\n   */\n  afterHelperCreated() {}\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @protected\n   */\n  prepareFrameInternal(frameState) {\n    return true;\n  }\n\n  /**\n   * @protected\n   */\n  clearCache() {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.clearCache();\n    this.removeHelper();\n    this.getLayer()?.removeChangeListener(\n      LayerProperty.MAP,\n      this.onMapChanged_,\n    );\n    super.disposeInternal();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      composeTransform(\n        this.inversePixelTransform_,\n        0,\n        0,\n        frameState.pixelRatio,\n        -frameState.pixelRatio,\n        0,\n        0,\n        -frameState.size[1],\n      );\n\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform_,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n}\n\nexport default WebGLLayerRenderer;\n", "/**\n * @module ol/renderer/webgl/TileLayerBase\n */\nimport LRUCache from '../../structs/LRUCache.js';\nimport ReprojDataTile from '../../reproj/DataTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport {abstract, getUid} from '../../util.js';\nimport {create as createMat4} from '../../vec/mat4.js';\nimport {\n  createOrUpdate as createTileCoord,\n  getKey as getTileCoordKey,\n} from '../../tilecoord.js';\nimport {\n  create as createTransform,\n  reset as resetTransform,\n  rotate as rotateTransform,\n  scale as scaleTransform,\n  translate as translateTransform,\n} from '../../transform.js';\nimport {descending} from '../../array.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getIntersection, isEmpty} from '../../extent.js';\nimport {toSize} from '../../size.js';\n\nexport const Uniforms = {\n  TILE_TRANSFORM: 'u_tileTransform',\n  TRANSITION_ALPHA: 'u_transitionAlpha',\n  DEPTH: 'u_depth',\n  RENDER_EXTENT: 'u_renderExtent', // intersection of layer, source, and view extent\n  PATTERN_ORIGIN: 'u_patternOrigin',\n  RESOLUTION: 'u_resolution',\n  ZOOM: 'u_zoom',\n  GLOBAL_ALPHA: 'u_globalAlpha',\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  SCREEN_TO_WORLD_MATRIX: 'u_screenToWorldMatrix',\n};\n\n/**\n * Transform a zoom level into a depth value; zoom level zero has a depth value of 0.5, and increasing values\n * have a depth trending towards 0\n * @param {number} z A zoom level.\n * @return {number} A depth value.\n */\nfunction depthForZ(z) {\n  return 1 / (z + 2);\n}\n\n/**\n * @typedef {import(\"../../webgl/BaseTileRepresentation.js\").default<import(\"../../Tile.js\").default>} AbstractTileRepresentation\n */\n/**\n * @typedef {Object} TileRepresentationLookup\n * @property {Set<string>} tileIds The set of tile ids in the lookup.\n * @property {Object<number, Set<AbstractTileRepresentation>>} representationsByZ Tile representations by zoom level.\n */\n\n/**\n * @return {TileRepresentationLookup} A new tile representation lookup.\n */\nexport function newTileRepresentationLookup() {\n  return {tileIds: new Set(), representationsByZ: {}};\n}\n\n/**\n * Check if a tile is already in the tile representation lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @return {boolean} The tile is already in the lookup.\n */\nfunction lookupHasTile(tileRepresentationLookup, tile) {\n  return tileRepresentationLookup.tileIds.has(getUid(tile));\n}\n\n/**\n * Add a tile representation to the lookup.\n * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of tile representations by zoom level.\n * @param {AbstractTileRepresentation} tileRepresentation A tile representation.\n * @param {number} z The zoom level.\n */\nfunction addTileRepresentationToLookup(\n  tileRepresentationLookup,\n  tileRepresentation,\n  z,\n) {\n  const representationsByZ = tileRepresentationLookup.representationsByZ;\n  if (!(z in representationsByZ)) {\n    representationsByZ[z] = new Set();\n  }\n  representationsByZ[z].add(tileRepresentation);\n  tileRepresentationLookup.tileIds.add(getUid(tileRepresentation.tile));\n}\n\n/**\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\nfunction getRenderExtent(frameState, extent) {\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\n  if (layerState.extent) {\n    extent = getIntersection(\n      extent,\n      fromUserExtent(layerState.extent, frameState.viewState.projection),\n    );\n  }\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\n    layerState.layer.getRenderSource()\n  );\n  if (!source.getWrapX()) {\n    const gridExtent = source\n      .getTileGridForProjection(frameState.viewState.projection)\n      .getExtent();\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n  return extent;\n}\n\nexport function getCacheKey(source, tileCoord) {\n  return `${source.getKey()},${getTileCoordKey(tileCoord)}`;\n}\n\n/**\n * @typedef {Object} Options\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {number} [cacheSize=512] The tile representation cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../layer/BaseTile.js\").default} BaseLayerType\n */\n\n/**\n * @classdesc\n * Base WebGL renderer for tile layers.\n * @template {BaseLayerType} LayerType\n * @template {import(\"../../Tile.js\").default} TileType\n * @template {import(\"../../webgl/BaseTileRepresentation.js\").default<TileType>} TileRepresentation\n * @extends {WebGLLayerRenderer<LayerType>}\n */\nclass WebGLBaseTileLayerRenderer extends WebGLLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, {\n      uniforms: options.uniforms,\n      postProcesses: options.postProcesses,\n    });\n\n    /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */\n    this.renderComplete = false;\n\n    /**\n     * This transform converts representation coordinates to screen coordinates.\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n    this.tileTransform_ = createTransform();\n\n    /**\n     * @type {Array<number>}\n     * @protected\n     */\n    this.tempMat4 = createMat4();\n\n    /**\n     * @type {import(\"../../TileRange.js\").default}\n     * @private\n     */\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\n\n    /**\n     * @type {import(\"../../size.js\").Size}\n     * @private\n     */\n    this.tempSize_ = [0, 0];\n\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<TileRepresentation>}\n     * @protected\n     */\n    this.tileRepresentationCache = new LRUCache(cacheSize);\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection_ = undefined;\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset({\n      uniforms: options.uniforms,\n    });\n  }\n\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrameInternal(frameState) {\n    if (!this.renderedProjection_) {\n      this.renderedProjection_ = frameState.viewState.projection;\n    } else if (frameState.viewState.projection !== this.renderedProjection_) {\n      this.clearCache();\n      this.renderedProjection_ = frameState.viewState.projection;\n    }\n\n    const layer = this.getLayer();\n    const source = layer.getRenderSource();\n    if (!source) {\n      return false;\n    }\n\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\n      return false;\n    }\n    return source.getState() === 'ready';\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../../webgl/BaseTileRepresentation.js\").TileRepresentationOptions<TileType>} options tile representation options\n   * @return {TileRepresentation} A new tile representation\n   * @protected\n   */\n  createTileRepresentation(options) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup The zoom level.\n   * @param {number} preload Number of additional levels to load.\n   */\n  enqueueTiles(\n    frameState,\n    extent,\n    initialZ,\n    tileRepresentationLookup,\n    preload,\n  ) {\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileRepresentationCache = this.tileRepresentationCache;\n\n    const map = tileLayer.getMapInternal();\n    const minZ = Math.max(\n      initialZ - preload,\n      tileGrid.getMinZoom(),\n      tileGrid.getZForResolution(\n        Math.min(\n          tileLayer.getMaxResolution(),\n          map\n            ? map\n                .getView()\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\n            : tileGrid.getResolution(0),\n        ),\n        tileSource.zDirection,\n      ),\n    );\n    for (let z = initialZ; z >= minZ; --z) {\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        extent,\n        z,\n        this.tempTileRange_,\n      );\n\n      const tileResolution = tileGrid.getResolution(z);\n\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n          const cacheKey = getCacheKey(tileSource, tileCoord);\n\n          /** @type {TileRepresentation} */\n          let tileRepresentation;\n\n          /** @type {TileType} */\n          let tile;\n\n          if (tileRepresentationCache.containsKey(cacheKey)) {\n            tileRepresentation = tileRepresentationCache.get(cacheKey);\n            tile = tileRepresentation.tile;\n          }\n          if (\n            !tileRepresentation ||\n            tileRepresentation.tile.key !== tileSource.getKey()\n          ) {\n            tile = tileSource.getTile(\n              z,\n              x,\n              y,\n              frameState.pixelRatio,\n              viewState.projection,\n            );\n            if (!tile) {\n              continue;\n            }\n          }\n\n          if (lookupHasTile(tileRepresentationLookup, tile)) {\n            continue;\n          }\n\n          if (!tileRepresentation) {\n            tileRepresentation = this.createTileRepresentation({\n              tile: tile,\n              grid: tileGrid,\n              helper: this.helper,\n              gutter: gutter,\n            });\n            tileRepresentationCache.set(cacheKey, tileRepresentation);\n          } else {\n            tileRepresentation.setTile(tile);\n          }\n\n          addTileRepresentationToLookup(\n            tileRepresentationLookup,\n            tileRepresentation,\n            z,\n          );\n\n          const tileQueueKey = tile.getKey();\n          wantedTiles[tileQueueKey] = true;\n\n          if (tile.getState() === TileState.IDLE) {\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n              frameState.tileQueue.enqueue([\n                tile,\n                tileSourceKey,\n                tileGrid.getTileCoordCenter(tileCoord),\n                tileResolution,\n              ]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} tilesWithAlpha True if at least one of the rendered tiles has alpha\n   * @protected\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    this.helper.prepareDraw(this.frameState, !tilesWithAlpha, true);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} If returns false, tile mask rendering will be skipped\n   * @protected\n   */\n  beforeTilesMaskRender(frameState) {\n    return false;\n  }\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {import(\"../../transform.js\").Transform} tileTransform Tile transform\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state\n   * @param {import(\"../../extent.js\").Extent} renderExtent Render extent\n   * @param {number} tileResolution Tile resolution\n   * @param {import(\"../../size.js\").Size} tileSize Tile size\n   * @param {import(\"../../coordinate.js\").Coordinate} tileOrigin Tile origin\n   * @param {import(\"../../extent.js\").Extent} tileExtent tile Extent\n   * @param {number} depth Depth\n   * @param {number} gutter Gutter\n   * @param {number} alpha Alpha\n   * @protected\n   */\n  renderTile(\n    tileRepresentation,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {}\n\n  /**\n   * @param {TileRepresentation} tileRepresentation Tile representation\n   * @param {number} tileZ Tile Z\n   * @param {import(\"../../extent.js\").Extent} extent Render extent\n   * @param {number} depth Depth\n   * @protected\n   */\n  renderTileMask(tileRepresentation, tileZ, extent, depth) {}\n\n  drawTile_(\n    frameState,\n    tileRepresentation,\n    tileZ,\n    gutter,\n    extent,\n    alphaLookup,\n    tileGrid,\n  ) {\n    if (!tileRepresentation.ready) {\n      return;\n    }\n    const tile = tileRepresentation.tile;\n    const tileCoord = tile.tileCoord;\n    const tileCoordKey = getTileCoordKey(tileCoord);\n    const alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\n\n    const tileResolution = tileGrid.getResolution(tileZ);\n    const tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\n    const tileOrigin = tileGrid.getOrigin(tileZ);\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n    // tiles with alpha are rendered last to allow blending\n    const depth = alpha < 1 ? -1 : depthForZ(tileZ);\n    if (alpha < 1) {\n      frameState.animate = true;\n    }\n\n    const viewState = frameState.viewState;\n    const centerX = viewState.center[0];\n    const centerY = viewState.center[1];\n\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n\n    const aspectRatio = tileWidthWithGutter / tileHeightWithGutter;\n\n    const centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\n    const centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\n\n    const tileScale = viewState.resolution / tileResolution;\n\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n\n    resetTransform(this.tileTransform_);\n    scaleTransform(\n      this.tileTransform_,\n      2 / ((frameState.size[0] * tileScale) / tileWidthWithGutter),\n      -2 / ((frameState.size[1] * tileScale) / tileWidthWithGutter),\n    );\n    rotateTransform(this.tileTransform_, viewState.rotation);\n    scaleTransform(this.tileTransform_, 1, 1 / aspectRatio);\n    translateTransform(\n      this.tileTransform_,\n      (tileSize[0] * (tileCenterI - centerI) - gutter) / tileWidthWithGutter,\n      (tileSize[1] * (tileCenterJ - centerJ) - gutter) / tileHeightWithGutter,\n    );\n\n    this.renderTile(\n      /** @type {TileRepresentation} */ (tileRepresentation),\n      this.tileTransform_,\n      frameState,\n      extent,\n      tileResolution,\n      tileSize,\n      tileOrigin,\n      tileExtent,\n      depth,\n      gutter,\n      alpha,\n    );\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState) {\n    this.frameState = frameState;\n    this.renderComplete = true;\n    const gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    const gutter = tileSource.getGutterForProjection(viewState.projection);\n    const extent = getRenderExtent(frameState, frameState.extent);\n    const z = tileGrid.getZForResolution(\n      viewState.resolution,\n      tileSource.zDirection,\n    );\n\n    /**\n     * @type {TileRepresentationLookup}\n     */\n    const tileRepresentationLookup = newTileRepresentationLookup();\n\n    const preload = tileLayer.getPreload();\n    if (frameState.nextExtent) {\n      const targetZ = tileGrid.getZForResolution(\n        viewState.nextResolution,\n        tileSource.zDirection,\n      );\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(\n        frameState,\n        nextExtent,\n        targetZ,\n        tileRepresentationLookup,\n        preload,\n      );\n    }\n\n    this.enqueueTiles(frameState, extent, z, tileRepresentationLookup, 0);\n    if (preload > 0) {\n      setTimeout(() => {\n        this.enqueueTiles(\n          frameState,\n          extent,\n          z - 1,\n          tileRepresentationLookup,\n          preload - 1,\n        );\n      }, 0);\n    }\n\n    /**\n     * A lookup of alpha values for tiles at the target rendering resolution\n     * for tiles that are in transition.  If a tile coord key is absent from\n     * this lookup, the tile should be rendered at alpha 1.\n     * @type {Object<string, number>}\n     */\n    const alphaLookup = {};\n\n    const uid = getUid(this);\n    const time = frameState.time;\n    let blend = false;\n\n    const representationsByZ = tileRepresentationLookup.representationsByZ;\n\n    // look for cached tiles to use if a target tile is not ready\n    if (z in representationsByZ) {\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tile = tileRepresentation.tile;\n        if (\n          (tile instanceof ReprojTile || tile instanceof ReprojDataTile) &&\n          tile.getState() === TileState.EMPTY\n        ) {\n          continue;\n        }\n        const tileCoord = tile.tileCoord;\n\n        if (tileRepresentation.ready) {\n          const alpha = tile.getAlpha(uid, time);\n          if (alpha === 1) {\n            // no need to look for alt tiles\n            tile.endTransition(uid);\n            continue;\n          }\n          blend = true;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          alphaLookup[tileCoordKey] = alpha;\n        }\n        this.renderComplete = false;\n\n        // first look for child tiles (at z + 1)\n        const coveredByChildren = this.findAltTiles_(\n          tileGrid,\n          tileCoord,\n          z + 1,\n          tileRepresentationLookup,\n        );\n\n        if (coveredByChildren) {\n          continue;\n        }\n\n        // next look for parent tiles\n        const minZoom = tileGrid.getMinZoom();\n        for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n          const coveredByParent = this.findAltTiles_(\n            tileGrid,\n            tileCoord,\n            parentZ,\n            tileRepresentationLookup,\n          );\n\n          if (coveredByParent) {\n            break;\n          }\n        }\n      }\n    }\n\n    const zs = Object.keys(representationsByZ).map(Number).sort(descending);\n\n    const renderTileMask = this.beforeTilesMaskRender(frameState);\n\n    if (renderTileMask) {\n      for (let j = 0, jj = zs.length; j < jj; ++j) {\n        const tileZ = zs[j];\n        for (const tileRepresentation of representationsByZ[tileZ]) {\n          const tileCoord = tileRepresentation.tile.tileCoord;\n          const tileCoordKey = getTileCoordKey(tileCoord);\n          // do not render the tile mask if alpha < 1\n          if (tileCoordKey in alphaLookup) {\n            continue;\n          }\n          const tileExtent = tileGrid.getTileCoordExtent(tileCoord);\n          this.renderTileMask(\n            /** @type {TileRepresentation} */ (tileRepresentation),\n            tileZ,\n            tileExtent,\n            depthForZ(tileZ),\n          );\n        }\n      }\n    }\n\n    this.beforeTilesRender(frameState, blend);\n\n    for (let j = 0, jj = zs.length; j < jj; ++j) {\n      const tileZ = zs[j];\n      for (const tileRepresentation of representationsByZ[tileZ]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          continue;\n        }\n\n        this.drawTile_(\n          frameState,\n          tileRepresentation,\n          tileZ,\n          gutter,\n          extent,\n          alphaLookup,\n          tileGrid,\n        );\n      }\n    }\n\n    if (z in representationsByZ) {\n      for (const tileRepresentation of representationsByZ[z]) {\n        const tileCoord = tileRepresentation.tile.tileCoord;\n        const tileCoordKey = getTileCoordKey(tileCoord);\n        if (tileCoordKey in alphaLookup) {\n          this.drawTile_(\n            frameState,\n            tileRepresentation,\n            z,\n            gutter,\n            extent,\n            alphaLookup,\n            tileGrid,\n          );\n        }\n      }\n    }\n\n    this.beforeFinalize(frameState);\n    this.helper.finalizeDraw(\n      frameState,\n      this.dispatchPreComposeEvent,\n      this.dispatchPostComposeEvent,\n    );\n\n    const canvas = this.helper.getCanvas();\n\n    const tileRepresentationCache = this.tileRepresentationCache;\n    while (tileRepresentationCache.canExpireCache()) {\n      const tileRepresentation = tileRepresentationCache.pop();\n      tileRepresentation.dispose();\n    }\n\n    this.postRender(gl, frameState);\n    return canvas;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  beforeFinalize(frameState) {\n    return;\n  }\n\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile representation lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {TileRepresentationLookup} tileRepresentationLookup Lookup of\n   * tile representations by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n  findAltTiles_(tileGrid, tileCoord, altZ, tileRepresentationLookup) {\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\n      tileCoord,\n      altZ,\n      this.tempTileRange_,\n    );\n\n    if (!tileRange) {\n      return false;\n    }\n\n    let covered = true;\n    const tileRepresentationCache = this.tileRepresentationCache;\n    const source = this.getLayer().getRenderSource();\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const cacheKey = getCacheKey(source, [altZ, x, y]);\n        let loaded = false;\n        if (tileRepresentationCache.containsKey(cacheKey)) {\n          const tileRepresentation = tileRepresentationCache.get(cacheKey);\n          if (\n            tileRepresentation.ready &&\n            !lookupHasTile(tileRepresentationLookup, tileRepresentation.tile)\n          ) {\n            addTileRepresentationToLookup(\n              tileRepresentationLookup,\n              tileRepresentation,\n              altZ,\n            );\n            loaded = true;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @override\n   */\n  clearCache() {\n    super.clearCache();\n\n    const tileRepresentationCache = this.tileRepresentationCache;\n    tileRepresentationCache.forEach((tileRepresentation) =>\n      tileRepresentation.dispose(),\n    );\n    tileRepresentationCache.clear();\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n\n    this.tileRepresentationCache.forEach((tileRepresentation) =>\n      tileRepresentation.setHelper(this.helper),\n    );\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    super.disposeInternal();\n    delete this.frameState;\n  }\n}\n\nexport default WebGLBaseTileLayerRenderer;\n", "/**\n * @module ol/renderer/webgl/TileLayer\n */\nimport ReprojDataTile from '../../reproj/DataTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileState from '../../TileState.js';\nimport TileTexture from '../../webgl/TileTexture.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLBaseTileLayerRenderer, {\n  Uniforms as BaseUniforms,\n  getCacheKey,\n} from './TileLayerBase.js';\nimport {AttributeType} from '../../webgl/Helper.js';\nimport {ELEMENT_ARRAY_BUFFER, STATIC_DRAW} from '../../webgl.js';\nimport {apply as applyTransform} from '../../transform.js';\nimport {\n  boundingExtent,\n  containsCoordinate,\n  getIntersection,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {fromTransform as mat4FromTransform} from '../../vec/mat4.js';\nimport {toSize} from '../../size.js';\n\nexport const Uniforms = {\n  ...BaseUniforms,\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\n  TEXTURE_RESOLUTION: 'u_textureResolution', // map units per texture pixel\n  TEXTURE_ORIGIN_X: 'u_textureOriginX', // map x coordinate of left edge of texture\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY', // map y coordinate of top edge of texture\n};\n\nexport const Attributes = {\n  TEXTURE_COORD: 'a_textureCoord',\n};\n\n/**\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n */\nconst attributeDescriptions = [\n  {\n    name: Attributes.TEXTURE_COORD,\n    size: 2,\n    type: AttributeType.FLOAT,\n  },\n];\n\n/**\n * @typedef {Object} Options\n * @property {string} vertexShader Vertex shader source.\n * @property {string} fragmentShader Fragment shader source.\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\n * @property {number} [cacheSize=512] The texture cache size.\n * @property {Array<import('./Layer.js').PostProcessesOptions>} [postProcesses] Post-processes definitions.\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").TileType} TileTextureType\n */\n\n/**\n * @typedef {import(\"../../webgl/TileTexture.js\").default} TileTextureRepresentation\n */\n\n/**\n * @classdesc\n * WebGL renderer for tile layers.\n * @template {import(\"../../layer/WebGLTile.js\").default|import(\"../../layer/Flow.js\").default} LayerType\n * @extends {WebGLBaseTileLayerRenderer<LayerType, TileTextureType, TileTextureRepresentation>}\n * @api\n */\nclass WebGLTileLayerRenderer extends WebGLBaseTileLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer, options);\n\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n    this.program_;\n\n    /**\n     * @private\n     */\n    this.vertexShader_ = options.vertexShader;\n\n    /**\n     * @private\n     */\n    this.fragmentShader_ = options.fragmentShader;\n\n    /**\n     * Tiles are rendered as a quad with the following structure:\n     *\n     *  [P3]---------[P2]\n     *   |`           |\n     *   |  `     B   |\n     *   |    `       |\n     *   |      `     |\n     *   |   A    `   |\n     *   |          ` |\n     *  [P0]---------[P1]\n     *\n     * Triangle A: P0, P1, P3\n     * Triangle B: P1, P2, P3\n     *\n     * @private\n     */\n    this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\n    this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    /**\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\n     * @private\n     */\n    this.paletteTextures_ = options.paletteTextures || [];\n  }\n\n  /**\n   * @param {Options} options Options.\n   * @override\n   */\n  reset(options) {\n    super.reset(options);\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n\n    this.vertexShader_ = options.vertexShader;\n    this.fragmentShader_ = options.fragmentShader;\n    this.paletteTextures_ = options.paletteTextures || [];\n\n    if (this.helper) {\n      this.program_ = this.helper.getProgram(\n        this.fragmentShader_,\n        this.vertexShader_,\n      );\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        // upload the texture data\n        paletteTexture.getTexture(gl);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  afterHelperCreated() {\n    super.afterHelperCreated();\n\n    const gl = this.helper.getGL();\n    for (const paletteTexture of this.paletteTextures_) {\n      // upload the texture data\n      paletteTexture.getTexture(gl);\n    }\n\n    this.program_ = this.helper.getProgram(\n      this.fragmentShader_,\n      this.vertexShader_,\n    );\n    this.helper.flushBufferData(this.indices_);\n  }\n\n  /**\n   * @override\n   */\n  removeHelper() {\n    if (this.helper) {\n      const gl = this.helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n    }\n\n    super.removeHelper();\n  }\n\n  /**\n   * @override\n   */\n  createTileRepresentation(options) {\n    return new TileTexture(options);\n  }\n\n  /**\n   * @override\n   */\n  beforeTilesRender(frameState, tilesWithAlpha) {\n    super.beforeTilesRender(frameState, tilesWithAlpha);\n    this.helper.useProgram(this.program_, frameState);\n  }\n\n  /**\n   * @override\n   */\n  renderTile(\n    tileTexture,\n    tileTransform,\n    frameState,\n    renderExtent,\n    tileResolution,\n    tileSize,\n    tileOrigin,\n    tileExtent,\n    depth,\n    gutter,\n    alpha,\n  ) {\n    const gl = this.helper.getGL();\n    this.helper.bindBuffer(tileTexture.coords);\n    this.helper.bindBuffer(this.indices_);\n    this.helper.enableAttributes(attributeDescriptions);\n\n    let textureSlot = 0;\n    while (textureSlot < tileTexture.textures.length) {\n      const uniformName = `${Uniforms.TILE_TEXTURE_ARRAY}[${textureSlot}]`;\n      this.helper.bindTexture(\n        tileTexture.textures[textureSlot],\n        textureSlot,\n        uniformName,\n      );\n      ++textureSlot;\n    }\n\n    for (\n      let paletteIndex = 0;\n      paletteIndex < this.paletteTextures_.length;\n      ++paletteIndex\n    ) {\n      const paletteTexture = this.paletteTextures_[paletteIndex];\n      const texture = paletteTexture.getTexture(gl);\n      this.helper.bindTexture(texture, textureSlot, paletteTexture.name);\n      ++textureSlot;\n    }\n\n    const viewState = frameState.viewState;\n\n    const tileWidthWithGutter = tileSize[0] + 2 * gutter;\n    const tileHeightWithGutter = tileSize[1] + 2 * gutter;\n\n    const tile = tileTexture.tile;\n    const tileCoord = tile.tileCoord;\n\n    const tileCenterI = tileCoord[1];\n    const tileCenterJ = tileCoord[2];\n\n    this.helper.setUniformMatrixValue(\n      Uniforms.TILE_TRANSFORM,\n      mat4FromTransform(this.tempMat4, tileTransform),\n    );\n\n    this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\n    this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n\n    let gutterExtent = renderExtent;\n    if (gutter > 0) {\n      gutterExtent = tileExtent;\n      getIntersection(gutterExtent, renderExtent, gutterExtent);\n    }\n    this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, gutterExtent);\n\n    this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\n    this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\n\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_PIXEL_WIDTH,\n      tileWidthWithGutter,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_PIXEL_HEIGHT,\n      tileHeightWithGutter,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_RESOLUTION,\n      tileResolution,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_ORIGIN_X,\n      tileOrigin[0] +\n        tileCenterI * tileSize[0] * tileResolution -\n        gutter * tileResolution,\n    );\n    this.helper.setUniformFloatValue(\n      Uniforms.TEXTURE_ORIGIN_Y,\n      tileOrigin[1] -\n        tileCenterJ * tileSize[1] * tileResolution +\n        gutter * tileResolution,\n    );\n\n    this.helper.drawElements(0, this.indices_.getSize());\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const gl = this.helper.getGL();\n    if (!gl) {\n      return null;\n    }\n\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const viewState = frameState.viewState;\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (\n        !containsCoordinate(\n          fromUserExtent(layerExtent, viewState.projection),\n          coordinate,\n        )\n      ) {\n        return null;\n      }\n    }\n\n    // determine last source suitable for rendering at coordinate\n    const sources = layer.getSources(\n      boundingExtent([coordinate]),\n      viewState.resolution,\n    );\n    let i, source, tileGrid;\n    for (i = sources.length - 1; i >= 0; --i) {\n      source = sources[i];\n      if (source.getState() === 'ready') {\n        tileGrid = source.getTileGridForProjection(viewState.projection);\n        if (source.getWrapX()) {\n          break;\n        }\n        const gridExtent = tileGrid.getExtent();\n        if (!gridExtent || containsCoordinate(gridExtent, coordinate)) {\n          break;\n        }\n      }\n    }\n    if (i < 0) {\n      return null;\n    }\n\n    const tileTextureCache = this.tileRepresentationCache;\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const cacheKey = getCacheKey(source, tileCoord);\n      if (!tileTextureCache.containsKey(cacheKey)) {\n        continue;\n      }\n      const tileTexture = tileTextureCache.get(cacheKey);\n      const tile = tileTexture.tile;\n      if (\n        (tile instanceof ReprojTile || tile instanceof ReprojDataTile) &&\n        tile.getState() === TileState.EMPTY\n      ) {\n        return null;\n      }\n      if (!tileTexture.loaded) {\n        continue;\n      }\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col =\n        (coordinate[0] - tileOrigin[0]) / tileResolution -\n        tileCoord[1] * tileSize[0];\n\n      const row =\n        (tileOrigin[1] - coordinate[1]) / tileResolution -\n        tileCoord[2] * tileSize[1];\n\n      return tileTexture.getPixelData(col, row);\n    }\n    return null;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    const helper = this.helper;\n    if (helper) {\n      const gl = helper.getGL();\n      for (const paletteTexture of this.paletteTextures_) {\n        paletteTexture.delete(gl);\n      }\n      this.paletteTextures_.length = 0;\n\n      gl.deleteProgram(this.program_);\n      delete this.program_;\n      helper.deleteBuffer(this.indices_);\n    }\n    super.disposeInternal();\n    delete this.indices_;\n  }\n}\n\nexport default WebGLTileLayerRenderer;\n", "/**\n * @module ol/webgl/PaletteTexture\n */\n\nclass PaletteTexture {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  constructor(name, data) {\n    this.name = name;\n    this.data = data;\n\n    /**\n     * @type {WebGLTexture|null}\n     * @private\n     */\n    this.texture_ = null;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n  getTexture(gl) {\n    if (!this.texture_) {\n      const texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        gl.RGBA,\n        this.data.length / 4,\n        1,\n        0,\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data,\n      );\n      this.texture_ = texture;\n    }\n    return this.texture_;\n  }\n\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   */\n  delete(gl) {\n    if (this.texture_) {\n      gl.deleteTexture(this.texture_);\n    }\n    this.texture_ = null;\n  }\n}\n\nexport default PaletteTexture;\n", "/**\n * @module ol/expr/gpu\n */\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport {\n  BooleanType,\n  CallExpression,\n  ColorType,\n  NumberArrayType,\n  NumberType,\n  Ops,\n  SizeType,\n  StringType,\n  computeGeometryType,\n  parse,\n  typeName,\n} from './expression.js';\nimport {Uniforms} from '../renderer/webgl/TileLayer.js';\nimport {asArray} from '../color.js';\nimport {toSize} from '../size.js';\n\n/**\n * @param {string} operator Operator\n * @param {CompilationContext} context Compilation context\n * @return {string} A function name based on the operator, unique in the given context\n */\nfunction computeOperatorFunctionName(operator, context) {\n  return `operator_${operator}_${Object.keys(context.functions).length}`;\n}\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\nexport function numberToGlsl(v) {\n  const s = v.toString();\n  return s.includes('.') ? s : s + '.0';\n}\n\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error(\n      '`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.',\n    );\n  }\n  return `vec${array.length}(${array.map(numberToGlsl).join(', ')})`;\n}\n\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function colorToGlsl(color) {\n  const array = asArray(color);\n  const alpha = array.length > 3 ? array[3] : 1;\n  return arrayToGlsl([array[0] / 255, array[1] / 255, array[2] / 255, alpha]);\n}\n\n/**\n * Normalizes and converts a number or array toa `vec2` array compatible with GLSL.\n * @param {number|import('../size.js').Size} size Size.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\nexport function sizeToGlsl(size) {\n  const array = toSize(size);\n  return arrayToGlsl(array);\n}\n\n/** @type {Object<string, number>} */\nconst stringToFloatMap = {};\nlet stringToFloatCounter = 0;\n\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\nexport function getStringNumberEquivalent(string) {\n  if (!(string in stringToFloatMap)) {\n    stringToFloatMap[string] = stringToFloatCounter++;\n  }\n  return stringToFloatMap[string];\n}\n\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * Note: with a float precision of `mediump`, the amount of unique strings supported is 16,777,216\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\nexport function stringToGlsl(string) {\n  return numberToGlsl(getStringNumberEquivalent(string));\n}\n\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\n\n/**\n * @typedef {import('./expression.js').ParsingContext} ParsingContext\n */\n/**\n *\n * @typedef {import(\"./expression.js\").Expression} Expression\n */\n/**\n *\n * @typedef {import(\"./expression.js\").LiteralExpression} LiteralExpression\n */\n\n/**\n * @typedef {Object} CompilationContextProperty\n * @property {string} name Name\n * @property {number} type Resolved property type\n * @property {function(import(\"../Feature.js\").FeatureLike): *} [evaluator] Function used for evaluating the value;\n */\n\n/**\n * @typedef {Object} CompilationContextVariable\n * @property {string} name Name\n * @property {number} type Resolved variable type\n * @property {function(Object): *} [evaluator] Function used for evaluating the value; argument is the style variables object\n */\n\n/**\n * @typedef {Object} CompilationContext\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\n * @property {Object<string, CompilationContextProperty>} properties The values for properties used in 'get' expressions.\n * @property {Object<string, CompilationContextVariable>} variables The values for variables used in 'var' expressions.\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n * @property {import(\"../style/webgl.js\").WebGLStyle} style Literal style.\n */\n\n/**\n * @return {CompilationContext} A new compilation context.\n */\nexport function newCompilationContext() {\n  return {\n    inFragmentShader: false,\n    variables: {},\n    properties: {},\n    functions: {},\n    bandCount: 0,\n    style: {},\n  };\n}\n\nconst GET_BAND_VALUE_FUNC = 'getBandValue';\n\nexport const PALETTE_TEXTURE_ARRAY = 'u_paletteTextures';\n\n/**\n * @typedef {string} CompiledExpression\n */\n\n/**\n * @typedef {function(CompilationContext, CallExpression, number): string} Compiler\n * Third argument is the expected value types\n */\n\n/**\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\n * @param {number} type The expected type.\n * @param {import('./expression.js').ParsingContext} parsingContext The parsing context.\n * @param {CompilationContext} compilationContext An existing compilation context\n * @return {CompiledExpression} The compiled expression.\n */\nexport function buildExpression(\n  encoded,\n  type,\n  parsingContext,\n  compilationContext,\n) {\n  const expression = parse(encoded, type, parsingContext);\n  return compile(expression, type, compilationContext);\n}\n\n/**\n * @param {function(Array<CompiledExpression>, CompilationContext): string} output Function that takes in parsed arguments and returns a string\n * @return {function(CompilationContext, import(\"./expression.js\").CallExpression, number): string} Compiler for the call expression\n */\nfunction createCompiler(output) {\n  return (context, expression, type) => {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      args[i] = compile(expression.args[i], type, context);\n    }\n    return output(args, context);\n  };\n}\n\n/**\n * @type {Object<string, Compiler>}\n */\nconst compilers = {\n  [Ops.Get]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\n    const propName = /** @type {string} */ (firstArg.value);\n    const isExisting = propName in context.properties;\n    if (!isExisting) {\n      context.properties[propName] = {\n        name: propName,\n        type: expression.type,\n      };\n    }\n    const prefix = context.inFragmentShader ? 'v_prop_' : 'a_prop_';\n    return prefix + propName;\n  },\n  [Ops.GeometryType]: (context, expression, type) => {\n    const propName = 'geometryType';\n    const isExisting = propName in context.properties;\n    if (!isExisting) {\n      context.properties[propName] = {\n        name: propName,\n        type: StringType,\n        evaluator: (feature) => {\n          return computeGeometryType(feature.getGeometry());\n        },\n      };\n    }\n    const prefix = context.inFragmentShader ? 'v_prop_' : 'a_prop_';\n    return prefix + propName;\n  },\n  [Ops.LineMetric]: () => 'currentLineMetric', // this variable is assumed to always be present in shaders, default is 0.\n  [Ops.Var]: (context, expression) => {\n    const firstArg = /** @type {LiteralExpression} */ (expression.args[0]);\n    const varName = /** @type {string} */ (firstArg.value);\n    const isExisting = varName in context.variables;\n    if (!isExisting) {\n      context.variables[varName] = {\n        name: varName,\n        type: expression.type,\n      };\n    }\n    return uniformNameForVariable(varName);\n  },\n  [Ops.Resolution]: () => 'u_resolution',\n  [Ops.Zoom]: () => 'u_zoom',\n  [Ops.Time]: () => 'u_time',\n  [Ops.Any]: createCompiler((compiledArgs) => `(${compiledArgs.join(` || `)})`),\n  [Ops.All]: createCompiler((compiledArgs) => `(${compiledArgs.join(` && `)})`),\n  [Ops.Not]: createCompiler(([value]) => `(!${value})`),\n  [Ops.Equal]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} == ${secondValue})`,\n  ),\n  [Ops.NotEqual]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} != ${secondValue})`,\n  ),\n  [Ops.GreaterThan]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} > ${secondValue})`,\n  ),\n  [Ops.GreaterThanOrEqualTo]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} >= ${secondValue})`,\n  ),\n  [Ops.LessThan]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} < ${secondValue})`,\n  ),\n  [Ops.LessThanOrEqualTo]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} <= ${secondValue})`,\n  ),\n  [Ops.Multiply]: createCompiler(\n    (compiledArgs) => `(${compiledArgs.join(' * ')})`,\n  ),\n  [Ops.Divide]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} / ${secondValue})`,\n  ),\n  [Ops.Add]: createCompiler((compiledArgs) => `(${compiledArgs.join(' + ')})`),\n  [Ops.Subtract]: createCompiler(\n    ([firstValue, secondValue]) => `(${firstValue} - ${secondValue})`,\n  ),\n  [Ops.Clamp]: createCompiler(\n    ([value, min, max]) => `clamp(${value}, ${min}, ${max})`,\n  ),\n  [Ops.Mod]: createCompiler(([value, modulo]) => `mod(${value}, ${modulo})`),\n  [Ops.Pow]: createCompiler(([value, power]) => `pow(${value}, ${power})`),\n  [Ops.Abs]: createCompiler(([value]) => `abs(${value})`),\n  [Ops.Floor]: createCompiler(([value]) => `floor(${value})`),\n  [Ops.Ceil]: createCompiler(([value]) => `ceil(${value})`),\n  [Ops.Round]: createCompiler(([value]) => `floor(${value} + 0.5)`),\n  [Ops.Sin]: createCompiler(([value]) => `sin(${value})`),\n  [Ops.Cos]: createCompiler(([value]) => `cos(${value})`),\n  [Ops.Atan]: createCompiler(([firstValue, secondValue]) => {\n    return secondValue !== undefined\n      ? `atan(${firstValue}, ${secondValue})`\n      : `atan(${firstValue})`;\n  }),\n  [Ops.Sqrt]: createCompiler(([value]) => `sqrt(${value})`),\n  [Ops.Match]: createCompiler((compiledArgs) => {\n    const input = compiledArgs[0];\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 1; i -= 2) {\n      const match = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${input} == ${match} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.Between]: createCompiler(\n    ([value, min, max]) => `(${value} >= ${min} && ${value} <= ${max})`,\n  ),\n  [Ops.Interpolate]: createCompiler(([exponent, input, ...compiledArgs]) => {\n    let result = '';\n    for (let i = 0; i < compiledArgs.length - 2; i += 2) {\n      const stop1 = compiledArgs[i];\n      const output1 = result || compiledArgs[i + 1];\n      const stop2 = compiledArgs[i + 2];\n      const output2 = compiledArgs[i + 3];\n      let ratio;\n      if (exponent === numberToGlsl(1)) {\n        ratio = `(${input} - ${stop1}) / (${stop2} - ${stop1})`;\n      } else {\n        ratio = `(pow(${exponent}, (${input} - ${stop1})) - 1.0) / (pow(${exponent}, (${stop2} - ${stop1})) - 1.0)`;\n      }\n      result = `mix(${output1}, ${output2}, clamp(${ratio}, 0.0, 1.0))`;\n    }\n    return result;\n  }),\n  [Ops.Case]: createCompiler((compiledArgs) => {\n    const fallback = compiledArgs[compiledArgs.length - 1];\n    let result = null;\n    for (let i = compiledArgs.length - 3; i >= 0; i -= 2) {\n      const condition = compiledArgs[i];\n      const output = compiledArgs[i + 1];\n      result = `(${condition} ? ${output} : ${result || fallback})`;\n    }\n    return result;\n  }),\n  [Ops.In]: createCompiler(([needle, ...haystack], context) => {\n    const funcName = computeOperatorFunctionName('in', context);\n    const tests = [];\n    for (let i = 0; i < haystack.length; i += 1) {\n      tests.push(`  if (inputValue == ${haystack[i]}) { return true; }`);\n    }\n    context.functions[funcName] = `bool ${funcName}(float inputValue) {\n${tests.join('\\n')}\n  return false;\n}`;\n    return `${funcName}(${needle})`;\n  }),\n  [Ops.Array]: createCompiler(\n    (args) => `vec${args.length}(${args.join(', ')})`,\n  ),\n  [Ops.Color]: createCompiler((compiledArgs) => {\n    if (compiledArgs.length === 1) {\n      //grayscale\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), 1.0)`;\n    }\n    if (compiledArgs.length === 2) {\n      //grayscale with alpha\n      return `vec4(vec3(${compiledArgs[0]} / 255.0), ${compiledArgs[1]})`;\n    }\n    const rgb = compiledArgs.slice(0, 3).map((color) => `${color} / 255.0`);\n    if (compiledArgs.length === 3) {\n      return `vec4(${rgb.join(', ')}, 1.0)`;\n    }\n    const alpha = compiledArgs[3];\n    return `vec4(${rgb.join(', ')}, ${alpha})`;\n  }),\n  [Ops.Band]: createCompiler(([band, xOffset, yOffset], context) => {\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      let ifBlocks = '';\n      const bandCount = context.bandCount || 1;\n      for (let i = 0; i < bandCount; i++) {\n        const colorIndex = Math.floor(i / 4);\n        let bandIndex = i % 4;\n        if (i === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n        const textureName = `${Uniforms.TILE_TEXTURE_ARRAY}[${colorIndex}]`;\n        ifBlocks += `  if (band == ${i + 1}.0) {\n    return texture2D(${textureName}, v_textureCoord + vec2(dx, dy))[${bandIndex}];\n  }\n`;\n      }\n\n      context.functions[GET_BAND_VALUE_FUNC] =\n        `float getBandValue(float band, float xOffset, float yOffset) {\n  float dx = xOffset / ${Uniforms.TEXTURE_PIXEL_WIDTH};\n  float dy = yOffset / ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n${ifBlocks}\n}`;\n    }\n\n    return `${GET_BAND_VALUE_FUNC}(${band}, ${xOffset ?? '0.0'}, ${\n      yOffset ?? '0.0'\n    })`;\n  }),\n  [Ops.Palette]: (context, expression) => {\n    const [index, ...colors] = expression.args;\n    const numColors = colors.length;\n    const palette = new Uint8Array(numColors * 4);\n    for (let i = 0; i < colors.length; i++) {\n      const parsedValue = /** @type {string | Array<number>} */ (\n        /** @type {LiteralExpression} */ (colors[i]).value\n      );\n      const color = asArray(parsedValue);\n      const offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n    const paletteName = `${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}]`;\n    const paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    const compiledIndex = compile(index, NumberType, context);\n    return `texture2D(${paletteName}, vec2((${compiledIndex} + 0.5) / ${numColors}.0, 0.5))`;\n  },\n  // TODO: unimplemented\n  // Ops.Number\n  // Ops.String\n  // Ops.Coalesce\n  // Ops.Concat\n  // Ops.ToString\n};\n\n/**\n * @param {Expression} expression The expression.\n * @param {number} returnType The expected return type.\n * @param {CompilationContext} context The compilation context.\n * @return {CompiledExpression} The compiled expression\n */\nfunction compile(expression, returnType, context) {\n  // operator\n  if (expression instanceof CallExpression) {\n    const compiler = compilers[expression.operator];\n    if (compiler === undefined) {\n      throw new Error(\n        `No compiler defined for this operator: ${JSON.stringify(\n          expression.operator,\n        )}`,\n      );\n    }\n    return compiler(context, expression, returnType);\n  }\n\n  if ((expression.type & NumberType) > 0) {\n    return numberToGlsl(/** @type {number} */ (expression.value));\n  }\n\n  if ((expression.type & BooleanType) > 0) {\n    return expression.value.toString();\n  }\n\n  if ((expression.type & StringType) > 0) {\n    return stringToGlsl(expression.value.toString());\n  }\n\n  if ((expression.type & ColorType) > 0) {\n    return colorToGlsl(\n      /** @type {Array<number> | string} */ (expression.value),\n    );\n  }\n\n  if ((expression.type & NumberArrayType) > 0) {\n    return arrayToGlsl(/** @type {Array<number>} */ (expression.value));\n  }\n\n  if ((expression.type & SizeType) > 0) {\n    return sizeToGlsl(\n      /** @type {number|import('../size.js').Size} */ (expression.value),\n    );\n  }\n\n  throw new Error(\n    `Unexpected expression ${expression.value} (expected type ${typeName(\n      returnType,\n    )})`,\n  );\n}\n", "/**\n * @module ol/render/webgl/utils\n */\nimport earcut from 'earcut';\nimport {apply as applyTransform} from '../../transform.js';\nimport {clamp} from '../../math.js';\n\nexport const LINESTRING_ANGLE_COSINE_CUTOFF = 0.985;\n\n/** @type {Array<number>} */\nconst tmpArray_ = [];\n\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\nconst bufferPositions_ = {vertexPosition: 0, indexPosition: 0};\n\n/**\n * @param {Float32Array} buffer Buffer\n * @param {number} pos Position\n * @param {number} x X\n * @param {number} y Y\n * @param {number} index Index\n */\nfunction writePointVertex(buffer, pos, x, y, index) {\n  buffer[pos + 0] = x;\n  buffer[pos + 1] = y;\n  buffer[pos + 2] = index;\n}\n\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesSize Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(\n  instructions,\n  elementIndex,\n  vertexBuffer,\n  indexBuffer,\n  customAttributesSize,\n  bufferPositions,\n) {\n  // This is for x, y and index\n  const baseVertexAttrsCount = 3;\n  const baseInstructionsCount = 2;\n  const stride = baseVertexAttrsCount + customAttributesSize;\n\n  const x = instructions[elementIndex + 0];\n  const y = instructions[elementIndex + 1];\n\n  // read custom numerical attributes on the feature\n  const customAttrs = tmpArray_;\n  customAttrs.length = customAttributesSize;\n  for (let i = 0; i < customAttrs.length; i++) {\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n  }\n\n  let vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n  let iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n  const baseIndex = vPos / stride;\n\n  // push vertices for each of the four quad corners (first standard then custom attributes)\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\n  customAttrs.length &&\n    vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n\n  indexBuffer[iPos++] = baseIndex;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 3;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 2;\n  indexBuffer[iPos++] = baseIndex + 3;\n\n  bufferPositions_.vertexPosition = vPos;\n  bufferPositions_.indexPosition = iPos;\n\n  return bufferPositions_;\n}\n\n/**\n * Pushes a single quad to form a line segment; also includes a computation for the join angles with previous and next\n * segment, in order to be able to offset the vertices correctly in the shader.\n * Join angles are between 0 and 2PI.\n * This also computes the length of the current segment and the sum of the join angle tangents in order\n * to store this information on each subsequent segment along the line. This is necessary to correctly render dashes\n * and symbols along the line.\n *\n *   pB (before)                          pA (after)\n *    X             negative             X\n *     \\             offset             /\n *      \\                              /\n *       \\   join              join   /\n *        \\ angle 0          angle 1 /\n *         \\←---                ←---/      positive\n *          \\   ←--          ←--   /        offset\n *           \\     ↑       ↓      /\n *            X────┴───────┴─────X\n *            p0                  p1\n *\n * @param {Float32Array} instructions Array of render instructions for lines.s\n * @param {number} segmentStartIndex Index of the segment start point from which render instructions will be read.\n * @param {number} segmentEndIndex Index of the segment end point from which render instructions will be read.\n * @param {number|null} beforeSegmentIndex Index of the point right before the segment (null if none, e.g this is a line start)\n * @param {number|null} afterSegmentIndex Index of the point right after the segment (null if none, e.g this is a line end)\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {Array<number>} customAttributes Array of custom attributes value\n * @param {import('../../transform.js').Transform} toWorldTransform Transform matrix used to obtain world coordinates from instructions\n * @param {number} currentLength Cumulated length of segments processed so far\n * @param {number} currentAngleTangentSum Cumulated tangents of the join angles processed so far\n * @return {{length: number, angle: number}} Cumulated length with the newly processed segment (in world units), new sum of the join angle tangents\n * @private\n */\nexport function writeLineSegmentToBuffers(\n  instructions,\n  segmentStartIndex,\n  segmentEndIndex,\n  beforeSegmentIndex,\n  afterSegmentIndex,\n  vertexArray,\n  indexArray,\n  customAttributes,\n  toWorldTransform,\n  currentLength,\n  currentAngleTangentSum,\n) {\n  // compute the stride to determine how many vertices were already pushed\n  const baseVertexAttrsCount = 10; // base attributes: x0, y0, m0, x1, y1, m1, angle0, angle1, distance, params\n  const stride = baseVertexAttrsCount + customAttributes.length;\n  const baseIndex = vertexArray.length / stride;\n\n  // The segment is composed of two positions called P0[x0, y0] and P1[x1, y1]\n  // Depending on whether there are points before and after the segment, its final shape\n  // will be different\n  const p0 = [\n    instructions[segmentStartIndex + 0],\n    instructions[segmentStartIndex + 1],\n  ];\n  const p1 = [instructions[segmentEndIndex], instructions[segmentEndIndex + 1]];\n\n  const m0 = instructions[segmentStartIndex + 2];\n  const m1 = instructions[segmentEndIndex + 2];\n\n  // to compute join angles we need to reproject coordinates back in world units\n  const p0world = applyTransform(toWorldTransform, [...p0]);\n  const p1world = applyTransform(toWorldTransform, [...p1]);\n\n  /**\n   * Compute the angle between p0pA and p0pB\n   * @param {import(\"../../coordinate.js\").Coordinate} p0 Point 0\n   * @param {import(\"../../coordinate.js\").Coordinate} pA Point A\n   * @param {import(\"../../coordinate.js\").Coordinate} pB Point B\n   * @return {number} a value in [0, 2PI]\n   */\n  function angleBetween(p0, pA, pB) {\n    const lenA = Math.sqrt(\n      (pA[0] - p0[0]) * (pA[0] - p0[0]) + (pA[1] - p0[1]) * (pA[1] - p0[1]),\n    );\n    const tangentA = [(pA[0] - p0[0]) / lenA, (pA[1] - p0[1]) / lenA];\n    const orthoA = [-tangentA[1], tangentA[0]];\n    const lenB = Math.sqrt(\n      (pB[0] - p0[0]) * (pB[0] - p0[0]) + (pB[1] - p0[1]) * (pB[1] - p0[1]),\n    );\n    const tangentB = [(pB[0] - p0[0]) / lenB, (pB[1] - p0[1]) / lenB];\n\n    // this angle can be clockwise or anticlockwise; hence the computation afterwards\n    const angle =\n      lenA === 0 || lenB === 0\n        ? 0\n        : Math.acos(\n            clamp(tangentB[0] * tangentA[0] + tangentB[1] * tangentA[1], -1, 1),\n          );\n    const isClockwise = tangentB[0] * orthoA[0] + tangentB[1] * orthoA[1] > 0;\n    return !isClockwise ? Math.PI * 2 - angle : angle;\n  }\n\n  // a negative angle indicates a line cap\n  let angle0 = -1;\n  let angle1 = -1;\n  let newAngleTangentSum = currentAngleTangentSum;\n\n  const joinBefore = beforeSegmentIndex !== null;\n  const joinAfter = afterSegmentIndex !== null;\n\n  // add vertices and adapt offsets for P0 in case of join\n  if (joinBefore) {\n    // B for before\n    const pB = [\n      instructions[beforeSegmentIndex],\n      instructions[beforeSegmentIndex + 1],\n    ];\n    const pBworld = applyTransform(toWorldTransform, [...pB]);\n    angle0 = angleBetween(p0world, p1world, pBworld);\n\n    // only add to the sum if the angle isn't too close to 0 or 2PI\n    if (Math.cos(angle0) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\n      newAngleTangentSum += Math.tan((angle0 - Math.PI) / 2);\n    }\n  }\n  // adapt offsets for P1 in case of join; add to angle sum\n  if (joinAfter) {\n    // A for after\n    const pA = [\n      instructions[afterSegmentIndex],\n      instructions[afterSegmentIndex + 1],\n    ];\n    const pAworld = applyTransform(toWorldTransform, [...pA]);\n    angle1 = angleBetween(p1world, p0world, pAworld);\n\n    // only add to the sum if the angle isn't too close to 0 or 2PI\n    if (Math.cos(angle1) <= LINESTRING_ANGLE_COSINE_CUTOFF) {\n      newAngleTangentSum += Math.tan((Math.PI - angle1) / 2);\n    }\n  }\n\n  /**\n   * @param {number} vertexIndex From 0 to 3, indicating position in the quad\n   * @param {number} angleSum Sum of the join angles encountered so far (used to compute distance offset\n   * @return {number} A float value containing both information\n   */\n  function computeParameters(vertexIndex, angleSum) {\n    if (angleSum === 0) {\n      return vertexIndex * 10000;\n    }\n    return Math.sign(angleSum) * (vertexIndex * 10000 + Math.abs(angleSum));\n  }\n\n  // add main segment triangles\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(0, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(1, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(2, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  vertexArray.push(\n    p0[0],\n    p0[1],\n    m0,\n    p1[0],\n    p1[1],\n    m1,\n    angle0,\n    angle1,\n    currentLength,\n    computeParameters(3, currentAngleTangentSum),\n  );\n  vertexArray.push(...customAttributes);\n\n  indexArray.push(\n    baseIndex,\n    baseIndex + 1,\n    baseIndex + 2,\n    baseIndex + 1,\n    baseIndex + 3,\n    baseIndex + 2,\n  );\n\n  return {\n    length:\n      currentLength +\n      Math.sqrt(\n        (p1world[0] - p0world[0]) * (p1world[0] - p0world[0]) +\n          (p1world[1] - p0world[1]) * (p1world[1] - p0world[1]),\n      ),\n    angle: newAngleTangentSum,\n  };\n}\n\n/**\n * Pushes several triangles to form a polygon, including holes\n * @param {Float32Array} instructions Array of render instructions for lines.\n * @param {number} polygonStartIndex Index of the polygon start point from which render instructions will be read.\n * @param {Array<number>} vertexArray Array containing vertices.\n * @param {Array<number>} indexArray Array containing indices.\n * @param {number} customAttributesSize Amount of custom attributes for each element.\n * @return {number} Next polygon instructions index\n * @private\n */\nexport function writePolygonTrianglesToBuffers(\n  instructions,\n  polygonStartIndex,\n  vertexArray,\n  indexArray,\n  customAttributesSize,\n) {\n  const instructionsPerVertex = 2; // x, y\n  const attributesPerVertex = 2 + customAttributesSize;\n  let instructionsIndex = polygonStartIndex;\n  const customAttributes = instructions.slice(\n    instructionsIndex,\n    instructionsIndex + customAttributesSize,\n  );\n  instructionsIndex += customAttributesSize;\n  const ringsCount = instructions[instructionsIndex++];\n  let verticesCount = 0;\n  const holes = new Array(ringsCount - 1);\n  for (let i = 0; i < ringsCount; i++) {\n    verticesCount += instructions[instructionsIndex++];\n    if (i < ringsCount - 1) {\n      holes[i] = verticesCount;\n    }\n  }\n  const flatCoords = instructions.slice(\n    instructionsIndex,\n    instructionsIndex + verticesCount * instructionsPerVertex,\n  );\n\n  // pushing to vertices and indices!! this is where the magic happens\n  const result = earcut(flatCoords, holes, instructionsPerVertex);\n  for (let i = 0; i < result.length; i++) {\n    indexArray.push(result[i] + vertexArray.length / attributesPerVertex);\n  }\n  for (let i = 0; i < flatCoords.length; i += 2) {\n    vertexArray.push(flatCoords[i], flatCoords[i + 1], ...customAttributes);\n  }\n\n  return instructionsIndex + verticesCount * instructionsPerVertex;\n}\n\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n  const canvas = document.createElement('canvas');\n  const image = canvas.getContext('2d').createImageData(1, 1);\n  image.data[0] = 255;\n  image.data[1] = 255;\n  image.data[2] = 255;\n  image.data[3] = 255;\n  return image;\n}\n\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, array) {\n  array = array || [];\n  const radix = 256;\n  const divide = radix - 1;\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\n  array[1] = (Math.floor(id / radix / radix) % radix) / divide;\n  array[2] = (Math.floor(id / radix) % radix) / divide;\n  array[3] = (id % radix) / divide;\n  return array;\n}\n\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n  let id = 0;\n  const radix = 256;\n  const mult = radix - 1;\n  id += Math.round(color[0] * radix * radix * radix * mult);\n  id += Math.round(color[1] * radix * radix * mult);\n  id += Math.round(color[2] * radix * mult);\n  id += Math.round(color[3] * mult);\n  return id;\n}\n", "/**\n * @module ol/style/flat\n */\n\n/**\n * @api\n * @fileoverview Vector layers can be styled with an object literal containing properties for\n * stroke, fill, image, and text styles.  The types below can be composed into a single object.\n * For example, a style with both stroke and fill properties could look like this:\n *\n *     const style = {\n *       'stroke-color': 'yellow',\n *       'stroke-width': 1.5,\n *       'fill-color': 'orange',\n *     };\n *\n * See details about the available properties depending on what type of symbolizer should be applied:\n *  * {@link module:ol/style/flat~FlatStroke Stroke} - properties for applying a stroke to lines and polygons\n *  * {@link module:ol/style/flat~FlatFill Fill} - properties for filling polygons\n *  * {@link module:ol/style/flat~FlatText Text} - properties for labeling points, lines, and polygons\n *  * {@link module:ol/style/flat~FlatIcon Icon} - properties for rendering points with an icon\n *  * {@link module:ol/style/flat~FlatCircle Circle} - properties for rendering points with a circle\n *  * {@link module:ol/style/flat~FlatShape Shape} - properties for rendering points with a regular shape\n *\n * To conditionally apply styles based on a filter, a list of {@link module:ol/style/flat~Rule rules} can be used.\n * For example, to style points with a big orange circle if the population is greater than 1 million and\n * a smaller blue circle otherwise:\n *\n *     const rules = [\n *       {\n *         filter: ['>', ['get', 'population'], 1_000_000],\n *         style: {\n *           'circle-radius': 10,\n *           'circle-fill-color': 'red',\n *         }\n *       },\n *       {\n *         else: true,\n *         style: {\n *           'circle-radius': 5,\n *           'circle-fill-color': 'blue',\n *         },\n *       },\n *     ];\n */\n\n/**\n * A literal boolean (e.g. `true`) or an expression that evaluates to a boolean (e.g. `['>', ['get', 'population'], 1_000_000]`).\n *\n * @typedef {boolean|Array} BooleanExpression\n */\n\n/**\n * A literal string (e.g. `'hello'`) or an expression that evaluates to a string (e.g. `['get', 'greeting']`).\n *\n * @typedef {string|Array} StringExpression\n */\n\n/**\n * A literal number (e.g. `42`) or an expression that evaluates to a number (e.g. `['+', 40, 2]`).\n *\n * @typedef {number|Array} NumberExpression\n */\n\n/**\n * A CSS named color (e.g. `'blue'`), an array of 3 RGB values (e.g. `[0, 255, 0]`), an array of 4 RGBA values\n * (e.g. `[0, 255, 0, 0.5]`), or an expression that evaluates to one of these color types (e.g. `['get', 'color']`).\n *\n * @typedef {import(\"../color.js\").Color|string|Array} ColorExpression\n */\n\n/**\n * An array of numbers (e.g. `[1, 2, 3]`) or an expression that evaluates to the same (e.g. `['get', 'values']`).\n *\n * @typedef {Array<number>|Array} NumberArrayExpression\n */\n\n/**\n * An array of two numbers (e.g. `[10, 20]`) or an expression that evaluates to the same (e.g. `['get', 'size']`).\n *\n * @typedef {number|Array<number>|Array} SizeExpression\n */\n\n/**\n * For static styling, the [layer.setStyle()]{@link module:ol/layer/Vector~VectorLayer#setStyle} method\n * can be called with an object literal that has fill, stroke, text, icon, regular shape, and/or circle properties.\n * @api\n *\n * @typedef {FlatFill & FlatStroke & FlatText & FlatIcon & FlatShape & FlatCircle} FlatStyle\n */\n\n/**\n * A flat style literal or an array of the same.\n *\n * @typedef {FlatStyle|Array<FlatStyle>|Array<Rule>} FlatStyleLike\n */\n\n/**\n * Fill style properties applied to polygon features.\n *\n * @typedef {Object} FlatFill\n * @property {ColorExpression} [fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {StringExpression} [fill-pattern-src] Fill pattern image URL.\n * @property {SizeExpression} [fill-pattern-size] Fill pattern image size in pixels.\n * Can be used together with `fill-pattern-offset` to define the sub-rectangle to use\n * from a fill pattern image sprite sheet.\n * @property {SizeExpression} [fill-pattern-offset] Fill pattern image offset in pixels.\n */\n\n/**\n * Stroke style properties applied to line strings and polygon boundaries.  To apply a stroke, at least one of\n * `stroke-color` or `stroke-width` must be provided.\n *\n * @typedef {Object} FlatStroke\n * @property {ColorExpression} [stroke-color] The stroke color.\n * @property {NumberExpression} [stroke-width] Stroke pixel width.\n * @property {StringExpression} [stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Label style properties applied to all features.  At a minimum, a `text-value` must be provided.\n *\n * @typedef {Object} FlatText\n * @property {StringExpression} [text-value] Text content (with `\\n` for line breaks).\n * @property {StringExpression} [text-font='10px sans-serif'] Font style as [CSS `font`](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font) value.\n * @property {NumberExpression} [text-max-angle=Math.PI/4] When `text-placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {NumberExpression} [text-offset-x=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {NumberExpression} [text-offset-y=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {BooleanExpression} [text-overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {StringExpression} [text-placement='point'] Text placement.\n * @property {NumberExpression} [text-repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available when\n * `text-placement` is set to `'line'`. Overrides `text-align`.\n * @property {SizeExpression} [text-scale] Scale.\n * @property {BooleanExpression} [text-rotate-with-view=false] Whether to rotate the text with the view.\n * @property {NumberExpression} [text-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {StringExpression} [text-align] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `'text-placement': 'point'`. For `'text-placement': 'line'`, the default is to let the renderer choose a\n * placement where `text-max-angle` is not exceeded.\n * @property {StringExpression} [text-justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `text-justify` is ignored for immediate rendering and also for `'text-placement': 'line'`.\n * @property {StringExpression} [text-baseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {NumberArrayExpression} [text-padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n * @property {ColorExpression} [text-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [text-background-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [text-stroke-color] The stroke color.\n * @property {StringExpression} [text-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [text-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [text-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [text-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [text-stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [text-stroke-width] Stroke pixel width.\n * @property {ColorExpression} [text-background-stroke-color] The stroke color.\n * @property {StringExpression} [text-background-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [text-background-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [text-background-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [text-background-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [text-background-stroke-miter-limit=10] Miter limit.\n * @property {NumberExpression} [text-background-stroke-width] Stroke pixel width.\n * @property {import(\"./Style.js\").DeclutterMode} [text-declutter-mode] Declutter mode\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Icon style properties applied to point features. `icon-src` must be provided to render\n * points with an icon.\n *\n * @typedef {Object} FlatIcon\n * @property {string} [icon-src] Image source URI.\n * @property {NumberArrayExpression} [icon-anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./Icon.js\").IconOrigin} [icon-anchor-origin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-x-units='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./Icon.js\").IconAnchorUnits} [icon-anchor-y-units='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [icon-color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [icon-cross-origin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `icon-cross-origin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {Array<number>} [icon-offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {NumberArrayExpression} [icon-displacement=[0,0]] Displacement of the icon.\n * @property {import(\"./Icon.js\").IconOrigin} [icon-offset-origin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {NumberExpression} [icon-opacity=1] Opacity of the icon.\n * @property {SizeExpression} [icon-scale=1] Scale.\n * @property {number} [icon-width] Width of the icon. If not specified, the actual image width will be used. Cannot be combined\n * with `scale`.\n * @property {number} [icon-height] Height of the icon. If not specified, the actual image height will be used. Cannot be combined\n * with `scale`.\n * @property {NumberExpression} [icon-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {BooleanExpression} [icon-rotate-with-view=false] Whether to rotate the icon with the view.\n * @property {import(\"../size.js\").Size} [icon-size] Icon size in pixel. Can be used together with `icon-offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"./Style.js\").DeclutterMode} [icon-declutter-mode] Declutter mode\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Regular shape style properties for rendering point features.  At least `shape-points` must be provided.\n *\n * @typedef {Object} FlatShape\n * @property {number} [shape-points] Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {ColorExpression} [shape-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [shape-stroke-color] The stroke color.\n * @property {NumberExpression} [shape-stroke-width] Stroke pixel width.\n * @property {StringExpression} [shape-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [shape-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [shape-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [shape-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [shape-stroke-miter-limit=10] Miter limit.\n * @property {number} [shape-radius] Radius of a regular polygon.\n * @property {number} [shape-radius2] Second radius to make a star instead of a regular polygon.\n * @property {number} [shape-angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {NumberArrayExpression} [shape-displacement=[0,0]] Displacement of the shape\n * @property {NumberExpression} [shape-rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {BooleanExpression} [shape-rotate-with-view=false] Whether to rotate the shape with the view.\n * @property {SizeExpression} [shape-scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `shape-radius` and `shape-radius2`.\n * @property {import(\"./Style.js\").DeclutterMode} [shape-declutter-mode] Declutter mode.\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * Circle style properties for rendering point features.  At least `circle-radius` must be provided.\n *\n * @typedef {Object} FlatCircle\n * @property {number} [circle-radius] Circle radius.\n * @property {ColorExpression} [circle-fill-color] The fill color. `'none'` means no fill and no hit detection.\n * @property {ColorExpression} [circle-stroke-color] The stroke color.\n * @property {NumberExpression} [circle-stroke-width] Stroke pixel width.\n * @property {StringExpression} [circle-stroke-line-cap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {StringExpression} [circle-stroke-line-join='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {NumberArrayExpression} [circle-stroke-line-dash] Line dash pattern.\n * @property {NumberExpression} [circle-stroke-line-dash-offset=0] Line dash offset.\n * @property {NumberExpression} [circle-stroke-miter-limit=10] Miter limit.\n * @property {NumberArrayExpression} [circle-displacement=[0,0]] displacement\n * @property {SizeExpression} [circle-scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `circle-radius`.\n * @property {NumberExpression} [circle-rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {BooleanExpression} [circle-rotate-with-view=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n * @property {import(\"./Style.js\").DeclutterMode} [circle-declutter-mode] Declutter mode\n * @property {NumberExpression} [z-index] The zIndex of the style.\n */\n\n/**\n * These default style properties are applied when no other style is given.\n *\n * @typedef {Object} DefaultStyle\n * @property {string} fill-color `'rgba(255,255,255,0.4)'`\n * @property {string} stroke-color `'#3399CC'`\n * @property {number} stroke-width `1.25`\n * @property {number} circle-radius `5`\n * @property {string} circle-fill-color `'rgba(255,255,255,0.4)'`\n * @property {number} circle-stroke-width `1.25`\n * @property {string} circle-stroke-color `'#3399CC'`\n */\n\n/**\n * @return {DefaultStyle} The default flat style.\n */\nexport function createDefaultStyle() {\n  return {\n    'fill-color': 'rgba(255,255,255,0.4)',\n    'stroke-color': '#3399CC',\n    'stroke-width': 1.25,\n    'circle-radius': 5,\n    'circle-fill-color': 'rgba(255,255,255,0.4)',\n    'circle-stroke-width': 1.25,\n    'circle-stroke-color': '#3399CC',\n  };\n}\n\n/**\n * A rule is used to conditionally apply a style.  If the rule's filter evaluates to true,\n * the style will be applied.\n *\n * @typedef {Object} Rule\n * @property {FlatStyle|Array<FlatStyle>} style The style to be applied if the filter matches.\n * @property {import(\"../expr/expression.js\").EncodedExpression} [filter] The filter used\n * to determine if a style applies.  If no filter is included, the rule always applies\n * (unless it is an else rule).\n * @property {boolean} [else] If true, the rule applies only if no other previous rule applies.\n * If the else rule also has a filter, the rule will not apply if the filter does not match.\n */\n", "/**\n * Class for generating shaders from literal style objects\n * @module ol/webgl/ShaderBuilder\n */\nimport {LINESTRING_ANGLE_COSINE_CUTOFF} from '../render/webgl/utils.js';\nimport {colorToGlsl, numberToGlsl, stringToGlsl} from '../expr/gpu.js';\nimport {createDefaultStyle} from '../style/flat.js';\n\nexport const COMMON_HEADER = `#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\nuniform mat4 u_projectionMatrix;\nuniform mat4 u_screenToWorldMatrix;\nuniform vec2 u_viewportSizePx;\nuniform float u_pixelRatio;\nuniform float u_globalAlpha;\nuniform float u_time;\nuniform float u_zoom;\nuniform float u_resolution;\nuniform float u_rotation;\nuniform vec4 u_renderExtent;\nuniform vec2 u_patternOrigin;\nuniform float u_depth;\nuniform mediump int u_hitDetection;\n\nconst float PI = 3.141592653589793238;\nconst float TWO_PI = 2.0 * PI;\nfloat currentLineMetric = 0.; // an actual value will be used in the stroke shaders\n`;\n\nconst DEFAULT_STYLE = createDefaultStyle();\n\n/**\n * @typedef {Object} VaryingDescription\n * @property {string} name Varying name, as will be declared in the header.\n * @property {string} type Varying type, either `float`, `vec2`, `vec4`...\n * @property {string} expression Expression which will be assigned to the varying in the vertex shader, and\n * passed on to the fragment shader.\n */\n\n/**\n * @classdesc\n * This class implements a classic builder pattern for generating many different types of shaders.\n * Methods can be chained, e. g.:\n *\n * ```js\n * const shader = new ShaderBuilder()\n *   .addVarying('v_width', 'float', 'a_width')\n *   .addUniform('u_time')\n *   .setColorExpression('...')\n *   .setSymbolSizeExpression('...')\n *   .getSymbolFragmentShader();\n * ```\n *\n * A note on [alpha premultiplication](https://en.wikipedia.org/wiki/Alpha_compositing#Straight_versus_premultiplied):\n * The ShaderBuilder class expects all colors to **not having been alpha-premultiplied!** This is because alpha\n * premultiplication is done at the end of each fragment shader.\n */\nexport class ShaderBuilder {\n  constructor() {\n    /**\n     * Uniforms; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.uniforms_ = [];\n\n    /**\n     * Attributes; these will be declared in the header (should include the type).\n     * @type {Array<string>}\n     * @private\n     */\n    this.attributes_ = [];\n\n    /**\n     * Varyings with a name, a type and an expression.\n     * @type {Array<VaryingDescription>}\n     * @private\n     */\n    this.varyings_ = [];\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasSymbol_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolSizeExpression_ = `vec2(${numberToGlsl(\n      DEFAULT_STYLE['circle-radius'],\n    )} + ${numberToGlsl(DEFAULT_STYLE['circle-stroke-width'] * 0.5)})`;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolRotationExpression_ = '0.0';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolOffsetExpression_ = 'vec2(0.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.symbolColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['circle-fill-color']),\n    );\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.texCoordExpression_ = 'vec4(0.0, 0.0, 1.0, 1.0)';\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.discardExpression_ = 'false';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.symbolRotateWithView_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasStroke_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeWidthExpression_ = numberToGlsl(DEFAULT_STYLE['stroke-width']);\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.strokeColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['stroke-color']),\n    );\n\n    /**\n     * @private\n     */\n    this.strokeOffsetExpression_ = '0.';\n\n    /**\n     * @private\n     */\n    this.strokeCapExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeJoinExpression_ = stringToGlsl('round');\n\n    /**\n     * @private\n     */\n    this.strokeMiterLimitExpression_ = '10.';\n\n    /**\n     * @private\n     */\n    this.strokeDistanceFieldExpression_ = '-1000.';\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.hasFill_ = false;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.fillColorExpression_ = colorToGlsl(\n      /** @type {string} */ (DEFAULT_STYLE['fill-color']),\n    );\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.vertexShaderFunctions_ = [];\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.fragmentShaderFunctions_ = [];\n  }\n\n  /**\n   * Adds a uniform accessible in both fragment and vertex shaders.\n   * The given name should include a type, such as `sampler2D u_texture`.\n   * @param {string} name Uniform name\n   * @return {ShaderBuilder} the builder object\n   */\n  addUniform(name) {\n    this.uniforms_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds an attribute accessible in the vertex shader, read from the geometry buffer.\n   * The given name should include a type, such as `vec2 a_position`.\n   * @param {string} name Attribute name\n   * @return {ShaderBuilder} the builder object\n   */\n  addAttribute(name) {\n    this.attributes_.push(name);\n    return this;\n  }\n\n  /**\n   * Adds a varying defined in the vertex shader and accessible from the fragment shader.\n   * The type and expression of the varying have to be specified separately.\n   * @param {string} name Varying name\n   * @param {'float'|'vec2'|'vec3'|'vec4'} type Type\n   * @param {string} expression Expression used to assign a value to the varying.\n   * @return {ShaderBuilder} the builder object\n   */\n  addVarying(name, type, expression) {\n    this.varyings_.push({\n      name: name,\n      type: type,\n      expression: expression,\n    });\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the size of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolSizeExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolSizeExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol size expression\n   */\n  getSymbolSizeExpression() {\n    return this.symbolSizeExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the rotation of the shape.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `float` value in radians.\n   * @param {string} expression Size expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotationExpression(expression) {\n    this.symbolRotationExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to compute the offset of the symbol from the point center.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec2` value.\n   * @param {string} expression Offset expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolOffsetExpression(expression) {\n    this.symbolOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol offset expression\n   */\n  getSymbolOffsetExpression() {\n    return this.symbolOffsetExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the color of the shape.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Color expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolColorExpression(expression) {\n    this.hasSymbol_ = true;\n    this.symbolColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current symbol color expression\n   */\n  getSymbolColorExpression() {\n    return this.symbolColorExpression_;\n  }\n\n  /**\n   * Sets an expression to compute the texture coordinates of the vertices.\n   * This expression can use all the uniforms and attributes available\n   * in the vertex shader, and should evaluate to a `vec4` value.\n   * @param {string} expression Texture coordinate expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setTextureCoordinateExpression(expression) {\n    this.texCoordExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * Sets an expression to determine whether a fragment (pixel) should be discarded,\n   * i.e. not drawn at all.\n   * This expression can use all the uniforms, varyings and attributes available\n   * in the fragment shader, and should evaluate to a `bool` value (it will be\n   * used in an `if` statement)\n   * @param {string} expression Fragment discard expression\n   * @return {ShaderBuilder} the builder object\n   */\n  setFragmentDiscardExpression(expression) {\n    this.discardExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fragment discard expression\n   */\n  getFragmentDiscardExpression() {\n    return this.discardExpression_;\n  }\n\n  /**\n   * Sets whether the symbols should rotate with the view or stay aligned with the map.\n   * Note: will only be used for point geometry shaders.\n   * @param {boolean} rotateWithView Rotate with view\n   * @return {ShaderBuilder} the builder object\n   */\n  setSymbolRotateWithView(rotateWithView) {\n    this.symbolRotateWithView_ = rotateWithView;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke width expression, returning value in pixels\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeWidthExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeWidthExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `vec4`: can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeColorExpression(expression) {\n    this.hasStroke_ = true;\n    this.strokeColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current stroke color expression\n   */\n  getStrokeColorExpression() {\n    return this.strokeColorExpression_;\n  }\n\n  /**\n   * @param {string} expression Stroke color expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeOffsetExpression(expression) {\n    this.strokeOffsetExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line cap expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeCapExpression(expression) {\n    this.strokeCapExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke line join expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeJoinExpression(expression) {\n    this.strokeJoinExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke miter limit expression, evaluate to `float`\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeMiterLimitExpression(expression) {\n    this.strokeMiterLimitExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Stroke distance field expression, evaluate to `float`\n   * This can override the default distance field; can rely on currentLengthPx and currentRadiusPx\n   * @return {ShaderBuilder} the builder object\n   */\n  setStrokeDistanceFieldExpression(expression) {\n    this.strokeDistanceFieldExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @param {string} expression Fill color expression, evaluate to `vec4`\n   * @return {ShaderBuilder} the builder object\n   */\n  setFillColorExpression(expression) {\n    this.hasFill_ = true;\n    this.fillColorExpression_ = expression;\n    return this;\n  }\n\n  /**\n   * @return {string} The current fill color expression\n   */\n  getFillColorExpression() {\n    return this.fillColorExpression_;\n  }\n\n  addVertexShaderFunction(code) {\n    if (this.vertexShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.vertexShaderFunctions_.push(code);\n  }\n  addFragmentShaderFunction(code) {\n    if (this.fragmentShaderFunctions_.includes(code)) {\n      return;\n    }\n    this.fragmentShaderFunctions_.push(code);\n  }\n\n  /**\n   * Generates a symbol vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolVertexShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute float a_index;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec2 v_quadCoord;\nvarying vec4 v_prop_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 pxToScreen(vec2 coordPx) {\n  vec2 scaled = coordPx / u_viewportSizePx / 0.5;\n  return scaled;\n}\n\nvec2 screenToPx(vec2 coordScreen) {\n  return (coordScreen * 0.5 + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  v_quadSizePx = ${this.symbolSizeExpression_};\n  vec2 halfSizePx = v_quadSizePx * 0.5;\n  vec2 centerOffsetPx = ${this.symbolOffsetExpression_};\n  vec2 offsetPx = centerOffsetPx;\n  if (a_index == 0.0) {\n    offsetPx -= halfSizePx;\n  } else if (a_index == 1.0) {\n    offsetPx += halfSizePx * vec2(1., -1.);\n  } else if (a_index == 2.0) {\n    offsetPx += halfSizePx;\n  } else {\n    offsetPx += halfSizePx * vec2(-1., 1.);\n  }\n  float angle = ${this.symbolRotationExpression_};\n  ${this.symbolRotateWithView_ ? 'angle += u_rotation;' : ''}\n  float c = cos(-angle);\n  float s = sin(-angle);\n  offsetPx = vec2(c * offsetPx.x - s * offsetPx.y, s * offsetPx.x + c * offsetPx.y);\n  vec4 center = u_projectionMatrix * vec4(a_position, 0.0, 1.0);\n  gl_Position = center + vec4(pxToScreen(offsetPx), u_depth, 0.);\n  vec4 texCoord = ${this.texCoordExpression_};\n  float u = a_index == 0.0 || a_index == 3.0 ? texCoord.s : texCoord.p;\n  float v = a_index == 2.0 || a_index == 3.0 ? texCoord.t : texCoord.q;\n  v_texCoord = vec2(u, v);\n  v_prop_hitColor = a_prop_hitColor;\n  v_angle = angle;\n  c = cos(-v_angle);\n  s = sin(-v_angle);\n  centerOffsetPx = vec2(c * centerOffsetPx.x - s * centerOffsetPx.y, s * centerOffsetPx.x + c * centerOffsetPx.y); \n  v_centerPx = screenToPx(center.xy) + centerOffsetPx;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a symbol fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getSymbolFragmentShader() {\n    if (!this.hasSymbol_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_texCoord;\nvarying vec4 v_prop_hitColor;\nvarying vec2 v_centerPx;\nvarying float v_angle;\nvarying vec2 v_quadSizePx;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvoid main(void) {\n  if (${this.discardExpression_}) { discard; }\n  vec2 coordsPx = gl_FragCoord.xy / u_pixelRatio - v_centerPx; // relative to center\n  float c = cos(v_angle);\n  float s = sin(v_angle);\n  coordsPx = vec2(c * coordsPx.x - s * coordsPx.y, s * coordsPx.x + c * coordsPx.y);\n  gl_FragColor = ${this.symbolColorExpression_};\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.05) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a stroke vertex shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeVertexShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_segmentStart;\nattribute vec2 a_segmentEnd;\nattribute float a_measureStart;\nattribute float a_measureEnd;\nattribute float a_parameters;\nattribute float a_distance;\nattribute vec2 a_joinAngles;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_prop_hitColor;\nvarying float v_distanceOffsetPx;\nvarying float v_measureStart;\nvarying float v_measureEnd;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvec4 pxToScreen(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return vec4(screenPos, u_depth, 1.0);\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nvec2 getJoinOffsetDirection(vec2 normalPx, float joinAngle) {\n  float halfAngle = joinAngle / 2.0;\n  float c = cos(halfAngle);\n  float s = sin(halfAngle);\n  vec2 angleBisectorNormal = vec2(s * normalPx.x + c * normalPx.y, -c * normalPx.x + s * normalPx.y);\n  float length = 1.0 / s;\n  return angleBisectorNormal * length;\n}\n\nvec2 getOffsetPoint(vec2 point, vec2 normal, float joinAngle, float offsetPx) {\n  // if on a cap or the join angle is too high, offset the line along the segment normal\n  if (cos(joinAngle) > 0.998 || isCap(joinAngle)) {\n    return point - normal * offsetPx;\n  }\n  // offset is applied along the inverted normal (positive offset goes \"right\" relative to line direction)\n  return point - getJoinOffsetDirection(normal, joinAngle) * offsetPx;\n}\n\nvoid main(void) {\n  v_angleStart = a_joinAngles.x;\n  v_angleEnd = a_joinAngles.y;\n  float vertexNumber = floor(abs(a_parameters) / 10000. + 0.5);\n  currentLineMetric = vertexNumber < 1.5 ? a_measureStart : a_measureEnd;\n  // we're reading the fractional part while keeping the sign (so -4.12 gives -0.12, 3.45 gives 0.45)\n  float angleTangentSum = fract(abs(a_parameters) / 10000.) * 10000. * sign(a_parameters);\n\n  float lineWidth = ${this.strokeWidthExpression_};\n  float lineOffsetPx = ${this.strokeOffsetExpression_};\n\n  // compute segment start/end in px with offset\n  vec2 segmentStartPx = worldToPx(a_segmentStart);\n  vec2 segmentEndPx = worldToPx(a_segmentEnd);\n  vec2 tangentPx = normalize(segmentEndPx - segmentStartPx);\n  vec2 normalPx = vec2(-tangentPx.y, tangentPx.x);\n  segmentStartPx = getOffsetPoint(segmentStartPx, normalPx, v_angleStart, lineOffsetPx),\n  segmentEndPx = getOffsetPoint(segmentEndPx, normalPx, v_angleEnd, lineOffsetPx);\n  \n  // compute current vertex position\n  float normalDir = vertexNumber < 0.5 || (vertexNumber > 1.5 && vertexNumber < 2.5) ? 1.0 : -1.0;\n  float tangentDir = vertexNumber < 1.5 ? 1.0 : -1.0;\n  float angle = vertexNumber < 1.5 ? v_angleStart : v_angleEnd;\n  vec2 joinDirection;\n  vec2 positionPx = vertexNumber < 1.5 ? segmentStartPx : segmentEndPx;\n  // if angle is too high, do not make a proper join\n  if (cos(angle) > ${LINESTRING_ANGLE_COSINE_CUTOFF} || isCap(angle)) {\n    joinDirection = normalPx * normalDir - tangentPx * tangentDir;\n  } else {\n    joinDirection = getJoinOffsetDirection(normalPx * normalDir, angle);\n  }\n  positionPx = positionPx + joinDirection * (lineWidth * 0.5 + 1.); // adding 1 pixel for antialiasing\n  gl_Position = pxToScreen(positionPx);\n\n  v_segmentStart = segmentStartPx;\n  v_segmentEnd = segmentEndPx;\n  v_width = lineWidth;\n  v_prop_hitColor = a_prop_hitColor;\n  v_distanceOffsetPx = a_distance / u_resolution - (lineOffsetPx * angleTangentSum);\n  v_measureStart = a_measureStart;\n  v_measureEnd = a_measureEnd;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a stroke fragment shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no size or color specified\n   */\n  getStrokeFragmentShader() {\n    if (!this.hasStroke_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec2 v_segmentStart;\nvarying vec2 v_segmentEnd;\nvarying float v_angleStart;\nvarying float v_angleEnd;\nvarying float v_width;\nvarying vec4 v_prop_hitColor;\nvarying float v_distanceOffsetPx;\nvarying float v_measureStart;\nvarying float v_measureEnd;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\n\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nbool isCap(float joinAngle) {\n  return joinAngle < -0.1;\n}\n\nfloat segmentDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  vec2 tangent = normalize(end - start);\n  vec2 normal = vec2(-tangent.y, tangent.x);\n  vec2 startToPoint = point - start;\n  return abs(dot(startToPoint, normal)) - width * 0.5;\n}\n\nfloat buttCapDistanceField(vec2 point, vec2 start, vec2 end) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  return dot(startToPoint, -tangent);\n}\n\nfloat squareCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return buttCapDistanceField(point, start, end) - width * 0.5;\n}\n\nfloat roundCapDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  float onSegment = max(0., 1000. * dot(point - start, end - start)); // this is very high when inside the segment\n  return length(point - start) - width * 0.5 - onSegment;\n}\n\nfloat roundJoinDistanceField(vec2 point, vec2 start, vec2 end, float width) {\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat bevelJoinField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  vec2 startToPoint = point - start;\n  vec2 tangent = normalize(end - start);\n  float c = cos(joinAngle * 0.5);\n  float s = sin(joinAngle * 0.5);\n  float direction = -sign(sin(joinAngle));\n  vec2 bisector = vec2(c * tangent.x - s * tangent.y, s * tangent.x + c * tangent.y);\n  float radius = width * 0.5 * s;\n  return dot(startToPoint, bisector * direction) - radius;\n}\n\nfloat miterJoinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle) {\n  if (cos(joinAngle) > ${LINESTRING_ANGLE_COSINE_CUTOFF}) { // avoid risking a division by zero\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  float miterLength = 1. / sin(joinAngle * 0.5);\n  float miterLimit = ${this.strokeMiterLimitExpression_};\n  if (miterLength > miterLimit) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  }\n  return -1000.;\n}\n\nfloat capDistanceField(vec2 point, vec2 start, vec2 end, float width, float capType) {\n   if (capType == ${stringToGlsl('butt')}) {\n    return buttCapDistanceField(point, start, end);\n  } else if (capType == ${stringToGlsl('square')}) {\n    return squareCapDistanceField(point, start, end, width);\n  }\n  return roundCapDistanceField(point, start, end, width);\n}\n\nfloat joinDistanceField(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float joinType) {\n  if (joinType == ${stringToGlsl('bevel')}) {\n    return bevelJoinField(point, start, end, width, joinAngle);\n  } else if (joinType == ${stringToGlsl('miter')}) {\n    return miterJoinDistanceField(point, start, end, width, joinAngle);\n  }\n  return roundJoinDistanceField(point, start, end, width);\n}\n\nfloat computeSegmentPointDistance(vec2 point, vec2 start, vec2 end, float width, float joinAngle, float capType, float joinType) {\n  if (isCap(joinAngle)) {\n    return capDistanceField(point, start, end, width, capType);\n  }\n  return joinDistanceField(point, start, end, width, joinAngle, joinType);\n}\n\nvoid main(void) {\n  vec2 currentPoint = gl_FragCoord.xy / u_pixelRatio;\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(currentPoint);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n\n  float segmentLength = length(v_segmentEnd - v_segmentStart);\n  vec2 segmentTangent = (v_segmentEnd - v_segmentStart) / segmentLength;\n  vec2 segmentNormal = vec2(-segmentTangent.y, segmentTangent.x);\n  vec2 startToPoint = currentPoint - v_segmentStart;\n  float lengthToPoint = max(0., min(dot(segmentTangent, startToPoint), segmentLength));\n  float currentLengthPx = lengthToPoint + v_distanceOffsetPx; \n  float currentRadiusPx = abs(dot(segmentNormal, startToPoint));\n  float currentRadiusRatio = dot(segmentNormal, startToPoint) * 2. / v_width;\n  currentLineMetric = mix(v_measureStart, v_measureEnd, lengthToPoint / segmentLength);\n\n  if (${this.discardExpression_}) { discard; }\n\n  vec4 color = ${this.strokeColorExpression_};\n  float capType = ${this.strokeCapExpression_};\n  float joinType = ${this.strokeJoinExpression_};\n  float segmentStartDistance = computeSegmentPointDistance(currentPoint, v_segmentStart, v_segmentEnd, v_width, v_angleStart, capType, joinType);\n  float segmentEndDistance = computeSegmentPointDistance(currentPoint, v_segmentEnd, v_segmentStart, v_width, v_angleEnd, capType, joinType);\n  float distance = max(\n    segmentDistanceField(currentPoint, v_segmentStart, v_segmentEnd, v_width),\n    max(segmentStartDistance, segmentEndDistance)\n  );\n  distance = max(distance, ${this.strokeDistanceFieldExpression_});\n  color.a *= smoothstep(0.5, -0.5, distance);\n  gl_FragColor = color;\n  gl_FragColor.a *= u_globalAlpha;\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n\n  /**\n   * Generates a fill vertex shader from the builder parameters\n   *\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillVertexShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nattribute vec2 a_position;\nattribute vec4 a_prop_hitColor;\n${this.attributes_\n  .map(function (attribute) {\n    return 'attribute ' + attribute + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.vertexShaderFunctions_.join('\\n')}\nvoid main(void) {\n  gl_Position = u_projectionMatrix * vec4(a_position, u_depth, 1.0);\n  v_prop_hitColor = a_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return '  ' + varying.name + ' = ' + varying.expression + ';';\n  })\n  .join('\\n')}\n}`;\n  }\n\n  /**\n   * Generates a fill fragment shader from the builder parameters\n   * @return {string|null} The full shader as a string; null if no color specified\n   */\n  getFillFragmentShader() {\n    if (!this.hasFill_) {\n      return null;\n    }\n\n    return `${COMMON_HEADER}\n${this.uniforms_\n  .map(function (uniform) {\n    return 'uniform ' + uniform + ';';\n  })\n  .join('\\n')}\nvarying vec4 v_prop_hitColor;\n${this.varyings_\n  .map(function (varying) {\n    return 'varying ' + varying.type + ' ' + varying.name + ';';\n  })\n  .join('\\n')}\n${this.fragmentShaderFunctions_.join('\\n')}\nvec2 pxToWorld(vec2 pxPos) {\n  vec2 screenPos = 2.0 * pxPos / u_viewportSizePx - 1.0;\n  return (u_screenToWorldMatrix * vec4(screenPos, 0.0, 1.0)).xy;\n}\n\nvec2 worldToPx(vec2 worldPos) {\n  vec4 screenPos = u_projectionMatrix * vec4(worldPos, 0.0, 1.0);\n  return (0.5 * screenPos.xy + 0.5) * u_viewportSizePx;\n}\n\nvoid main(void) {\n  vec2 pxPos = gl_FragCoord.xy / u_pixelRatio;\n  vec2 pxOrigin = worldToPx(u_patternOrigin);\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  vec2 worldPos = pxToWorld(pxPos);\n  if (\n    abs(u_renderExtent[0] - u_renderExtent[2]) > 0.0 && (\n      worldPos[0] < u_renderExtent[0] ||\n      worldPos[1] < u_renderExtent[1] ||\n      worldPos[0] > u_renderExtent[2] ||\n      worldPos[1] > u_renderExtent[3]\n    )\n  ) {\n    discard;\n  }\n  #endif\n  if (${this.discardExpression_}) { discard; }\n  gl_FragColor = ${this.fillColorExpression_};\n  gl_FragColor.a *= u_globalAlpha;\n  gl_FragColor.rgb *= gl_FragColor.a;\n  if (u_hitDetection > 0) {\n    if (gl_FragColor.a < 0.1) { discard; };\n    gl_FragColor = v_prop_hitColor;\n  }\n}`;\n  }\n}\n", "/**\n * Utilities for parsing literal style objects\n * @module ol/webgl/styleparser\n */\nimport {\n  BooleanType,\n  ColorType,\n  NumberArrayType,\n  NumberType,\n  SizeType,\n  StringType,\n  newParsingContext,\n} from '../expr/expression.js';\nimport {ShaderBuilder} from './ShaderBuilder.js';\nimport {asArray} from '../color.js';\nimport {\n  buildExpression,\n  getStringNumberEquivalent,\n  stringToGlsl,\n  uniformNameForVariable,\n} from '../expr/gpu.js';\n\n/**\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a compilation context that\n * will be read and modified during the parsing operation.\n * @param {import(\"../expr/gpu.js\").CompilationContext} compilationContext Compilation context\n * @param {import(\"../expr/expression.js\").EncodedExpression} value Value\n * @param {number} [expectedType] Expected final type (can be several types combined)\n * @return {string} GLSL-compatible output\n */\nexport function expressionToGlsl(compilationContext, value, expectedType) {\n  const parsingContext = newParsingContext();\n  return buildExpression(\n    value,\n    expectedType,\n    parsingContext,\n    compilationContext,\n  );\n}\n\n/**\n * Packs all components of a color into a two-floats array\n * @param {import(\"../color.js\").Color|string} color Color as array of numbers or string\n * @return {Array<number>} Vec2 array containing the color in compressed form\n */\nexport function packColor(color) {\n  const array = asArray(color);\n  const r = array[0] * 256;\n  const g = array[1];\n  const b = array[2] * 256;\n  const a = Math.round(array[3] * 255);\n  return [r + g, b + a];\n}\n\nconst UNPACK_COLOR_FN = `vec4 unpackColor(vec2 packedColor) {\n  return vec4(\n    fract(floor(packedColor[0] / 256.0) / 256.0),\n    fract(packedColor[0] / 256.0),\n    fract(floor(packedColor[1] / 256.0) / 256.0),\n    fract(packedColor[1] / 256.0)\n  );\n}`;\n\n/**\n * @param {number} type Value type\n * @return {1|2|3|4} The amount of components for this value\n */\nfunction getGlslSizeFromType(type) {\n  if (type === ColorType || type === SizeType) {\n    return 2;\n  }\n  if (type === NumberArrayType) {\n    return 4;\n  }\n  return 1;\n}\n\n/**\n * @param {number} type Value type\n * @return {'float'|'vec2'|'vec3'|'vec4'} The corresponding GLSL type for this value\n */\nfunction getGlslTypeFromType(type) {\n  const size = getGlslSizeFromType(type);\n  if (size > 1) {\n    return /** @type {'vec2'|'vec3'|'vec4'} */ (`vec${size}`);\n  }\n  return 'float';\n}\n\n/**\n * see https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\n * @param {Object|string} input The hash input, either an object or string\n * @return {string} Hash (if the object cannot be serialized, it is based on `getUid`)\n */\nexport function computeHash(input) {\n  const hash = JSON.stringify(input)\n    .split('')\n    .reduce((prev, curr) => (prev << 5) - prev + curr.charCodeAt(0), 0);\n  return (hash >>> 0).toString();\n}\n\n/**\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {'shape-'|'circle-'|'icon-'} prefix Properties prefix\n */\nfunction parseCommonSymbolProperties(style, builder, vertContext, prefix) {\n  if (`${prefix}radius` in style && prefix !== 'icon-') {\n    let radius = expressionToGlsl(\n      vertContext,\n      style[`${prefix}radius`],\n      NumberType,\n    );\n    if (`${prefix}radius2` in style) {\n      const radius2 = expressionToGlsl(\n        vertContext,\n        style[`${prefix}radius2`],\n        NumberType,\n      );\n      radius = `max(${radius}, ${radius2})`;\n    }\n    if (`${prefix}stroke-width` in style) {\n      radius = `(${radius} + ${expressionToGlsl(\n        vertContext,\n        style[`${prefix}stroke-width`],\n        NumberType,\n      )} * 0.5)`;\n    }\n    builder.setSymbolSizeExpression(`vec2(${radius} * 2. + 0.5)`); // adding some padding for antialiasing\n  }\n  if (`${prefix}scale` in style) {\n    const scale = expressionToGlsl(\n      vertContext,\n      style[`${prefix}scale`],\n      SizeType,\n    );\n    builder.setSymbolSizeExpression(\n      `${builder.getSymbolSizeExpression()} * ${scale}`,\n    );\n  }\n  if (`${prefix}displacement` in style) {\n    builder.setSymbolOffsetExpression(\n      expressionToGlsl(\n        vertContext,\n        style[`${prefix}displacement`],\n        NumberArrayType,\n      ),\n    );\n  }\n  if (`${prefix}rotation` in style) {\n    builder.setSymbolRotationExpression(\n      expressionToGlsl(vertContext, style[`${prefix}rotation`], NumberType),\n    );\n  }\n  if (`${prefix}rotate-with-view` in style) {\n    builder.setSymbolRotateWithView(!!style[`${prefix}rotate-with-view`]);\n  }\n}\n\n/**\n * @param {string} distanceField The distance field expression\n * @param {string|null} fillColor The fill color expression; null if no fill\n * @param {string|null} strokeColor The stroke color expression; null if no stroke\n * @param {string|null} strokeWidth The stroke width expression; null if no stroke\n * @param {string|null} opacity The opacity expression; null if no stroke\n * @return {string} The final color expression, based on the distance field and given params\n */\nfunction getColorFromDistanceField(\n  distanceField,\n  fillColor,\n  strokeColor,\n  strokeWidth,\n  opacity,\n) {\n  let color = 'vec4(0.)';\n  if (fillColor !== null) {\n    color = fillColor;\n  }\n  if (strokeColor !== null && strokeWidth !== null) {\n    const strokeFillRatio = `smoothstep(-${strokeWidth} + 0.63, -${strokeWidth} - 0.58, ${distanceField})`;\n    color = `mix(${strokeColor}, ${color}, ${strokeFillRatio})`;\n  }\n  const shapeOpacity = `(1.0 - smoothstep(-0.63, 0.58, ${distanceField}))`;\n  let result = `${color} * vec4(1.0, 1.0, 1.0, ${shapeOpacity})`;\n  if (opacity !== null) {\n    result = `${result} * vec4(1.0, 1.0, 1.0, ${opacity})`;\n  }\n  return result;\n}\n\n/**\n * This will parse an image property provided by `<prefix>-src`\n * The image size expression in GLSL will be returned\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {'icon-'|'fill-pattern-'|'stroke-pattern-'} prefix Property prefix\n * @param {string} textureId A identifier that will be used in the generated uniforms: `sample2d u_texture<id>` and `vec2 u_texture<id>_size`\n * @return {string} The image size expression\n */\nfunction parseImageProperties(style, builder, uniforms, prefix, textureId) {\n  const image = new Image();\n  image.crossOrigin =\n    style[`${prefix}cross-origin`] === undefined\n      ? 'anonymous'\n      : style[`${prefix}cross-origin`];\n  image.src = style[`${prefix}src`];\n\n  // the size is provided asynchronously using a uniform\n  uniforms[`u_texture${textureId}_size`] = () => {\n    return image.complete ? [image.width, image.height] : [0, 0];\n  };\n  builder.addUniform(`vec2 u_texture${textureId}_size`);\n  const size = `u_texture${textureId}_size`;\n\n  uniforms[`u_texture${textureId}`] = image;\n  builder.addUniform(`sampler2D u_texture${textureId}`);\n  return size;\n}\n\n/**\n * This will parse an image's offset properties provided by `<prefix>-offset`, `<prefix>-offset-origin` and `<prefix>-size`\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {'icon-'|'fill-pattern-'|'stroke-pattern-'} prefix Property prefix\n * @param {import(\"../expr/gpu.js\").CompilationContext} context Shader compilation context (vertex or fragment)\n * @param {string} imageSize Pixel size of the full image as a GLSL expression\n * @param {string} sampleSize Pixel size of the sample in the image as a GLSL expression\n * @return {string} The offset expression\n */\nfunction parseImageOffsetProperties(\n  style,\n  prefix,\n  context,\n  imageSize,\n  sampleSize,\n) {\n  let offsetExpression = expressionToGlsl(\n    context,\n    style[`${prefix}offset`],\n    NumberArrayType,\n  );\n  if (`${prefix}offset-origin` in style) {\n    switch (style[`${prefix}offset-origin`]) {\n      case 'top-right':\n        offsetExpression = `vec2(${imageSize}.x, 0.) + ${sampleSize} * vec2(-1., 0.) + ${offsetExpression} * vec2(-1., 1.)`;\n        break;\n      case 'bottom-left':\n        offsetExpression = `vec2(0., ${imageSize}.y) + ${sampleSize} * vec2(0., -1.) + ${offsetExpression} * vec2(1., -1.)`;\n        break;\n      case 'bottom-right':\n        offsetExpression = `${imageSize} - ${sampleSize} - ${offsetExpression}`;\n        break;\n      default: // pass\n    }\n  }\n  return offsetExpression;\n}\n\n/**\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseCircleProperties(\n  style,\n  builder,\n  uniforms,\n  vertContext,\n  fragContext,\n) {\n  // this function takes in screen coordinates in pixels and returns the signed distance field\n  // (0 on the boundary, negative inside the circle, positive outside, values in pixels)\n  fragContext.functions['circleDistanceField'] =\n    `float circleDistanceField(vec2 point, float radius) {\n  return length(point) - radius;\n}`;\n\n  parseCommonSymbolProperties(style, builder, vertContext, 'circle-');\n\n  // OPACITY\n  let opacity = null;\n  if ('circle-opacity' in style) {\n    opacity = expressionToGlsl(\n      fragContext,\n      style['circle-opacity'],\n      NumberType,\n    );\n  }\n\n  // SCALE\n  let currentPoint = 'coordsPx';\n  if ('circle-scale' in style) {\n    const scale = expressionToGlsl(\n      fragContext,\n      style['circle-scale'],\n      SizeType,\n    );\n    currentPoint = `coordsPx / ${scale}`;\n  }\n\n  // FILL COLOR\n  let fillColor = null;\n  if ('circle-fill-color' in style) {\n    fillColor = expressionToGlsl(\n      fragContext,\n      style['circle-fill-color'],\n      ColorType,\n    );\n  }\n\n  // STROKE COLOR\n  let strokeColor = null;\n  if ('circle-stroke-color' in style) {\n    strokeColor = expressionToGlsl(\n      fragContext,\n      style['circle-stroke-color'],\n      ColorType,\n    );\n  }\n\n  // RADIUS\n  let radius = expressionToGlsl(\n    fragContext,\n    style['circle-radius'],\n    NumberType,\n  );\n\n  // STROKE WIDTH\n  let strokeWidth = null;\n  if ('circle-stroke-width' in style) {\n    strokeWidth = expressionToGlsl(\n      fragContext,\n      style['circle-stroke-width'],\n      NumberType,\n    );\n    radius = `(${radius} + ${strokeWidth} * 0.5)`;\n  }\n\n  // FINAL COLOR\n  const distanceField = `circleDistanceField(${currentPoint}, ${radius})`;\n  const colorExpression = getColorFromDistanceField(\n    distanceField,\n    fillColor,\n    strokeColor,\n    strokeWidth,\n    opacity,\n  );\n  builder.setSymbolColorExpression(colorExpression);\n}\n\n/**\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseShapeProperties(\n  style,\n  builder,\n  uniforms,\n  vertContext,\n  fragContext,\n) {\n  fragContext.functions['round'] = `float round(float v) {\n  return sign(v) * floor(abs(v) + 0.5);\n}`;\n\n  // these functions take in screen coordinates in pixels and returns the signed distance field\n  // (0 on the boundary, negative inside the polygon, positive outside, values in pixels)\n  // inspired by https://github.com/zranger1/PixelblazePatterns/blob/master/Toolkit/sdf2d.md#n-sided-regular-polygon\n  fragContext.functions['starDistanceField'] =\n    `float starDistanceField(vec2 point, float numPoints, float radius, float radius2, float angle) {\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\n  float c = cos(startAngle);\n  float s = sin(startAngle);\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);\n  float alpha = TWO_PI / numPoints; // the angle of one sector\n  float beta = atan(pointRotated.y, pointRotated.x);\n  float gamma = round(beta / alpha) * alpha; // angle in sector\n  c = cos(-gamma);\n  s = sin(-gamma);\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\n  vec2 tipToPoint = inSector + vec2(-radius, 0.);\n  vec2 edgeNormal = vec2(radius2 * sin(alpha * 0.5), -radius2 * cos(alpha * 0.5) + radius);\n  return dot(normalize(edgeNormal), tipToPoint);\n}`;\n  fragContext.functions['regularDistanceField'] =\n    `float regularDistanceField(vec2 point, float numPoints, float radius, float angle) {\n  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle\n  float c = cos(startAngle);\n  float s = sin(startAngle);\n  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);\n  float alpha = TWO_PI / numPoints; // the angle of one sector\n  float radiusIn = radius * cos(PI / numPoints);\n  float beta = atan(pointRotated.y, pointRotated.x);\n  float gamma = round((beta - alpha * 0.5) / alpha) * alpha + alpha * 0.5; // angle in sector from mid\n  c = cos(-gamma);\n  s = sin(-gamma);\n  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));\n  return inSector.x - radiusIn;\n}`;\n\n  parseCommonSymbolProperties(style, builder, vertContext, 'shape-');\n\n  // OPACITY\n  let opacity = null;\n  if ('shape-opacity' in style) {\n    opacity = expressionToGlsl(fragContext, style['shape-opacity'], NumberType);\n  }\n\n  // SCALE\n  let currentPoint = 'coordsPx';\n  if ('shape-scale' in style) {\n    const scale = expressionToGlsl(fragContext, style['shape-scale'], SizeType);\n    currentPoint = `coordsPx / ${scale}`;\n  }\n\n  // FILL COLOR\n  let fillColor = null;\n  if ('shape-fill-color' in style) {\n    fillColor = expressionToGlsl(\n      fragContext,\n      style['shape-fill-color'],\n      ColorType,\n    );\n  }\n\n  // STROKE COLOR\n  let strokeColor = null;\n  if ('shape-stroke-color' in style) {\n    strokeColor = expressionToGlsl(\n      fragContext,\n      style['shape-stroke-color'],\n      ColorType,\n    );\n  }\n\n  // STROKE WIDTH\n  let strokeWidth = null;\n  if ('shape-stroke-width' in style) {\n    strokeWidth = expressionToGlsl(\n      fragContext,\n      style['shape-stroke-width'],\n      NumberType,\n    );\n  }\n\n  // SHAPE TYPE\n  const numPoints = expressionToGlsl(\n    fragContext,\n    style['shape-points'],\n    NumberType,\n  );\n  let angle = '0.';\n  if ('shape-angle' in style) {\n    angle = expressionToGlsl(fragContext, style['shape-angle'], NumberType);\n  }\n  let shapeField;\n  let radius = expressionToGlsl(fragContext, style['shape-radius'], NumberType);\n  if (strokeWidth !== null) {\n    radius = `${radius} + ${strokeWidth} * 0.5`;\n  }\n  if ('shape-radius2' in style) {\n    let radius2 = expressionToGlsl(\n      fragContext,\n      style['shape-radius2'],\n      NumberType,\n    );\n    if (strokeWidth !== null) {\n      radius2 = `${radius2} + ${strokeWidth} * 0.5`;\n    }\n    shapeField = `starDistanceField(${currentPoint}, ${numPoints}, ${radius}, ${radius2}, ${angle})`;\n  } else {\n    shapeField = `regularDistanceField(${currentPoint}, ${numPoints}, ${radius}, ${angle})`;\n  }\n\n  // FINAL COLOR\n  const colorExpression = getColorFromDistanceField(\n    shapeField,\n    fillColor,\n    strokeColor,\n    strokeWidth,\n    opacity,\n  );\n  builder.setSymbolColorExpression(colorExpression);\n}\n\n/**\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {ShaderBuilder} builder Shader builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseIconProperties(\n  style,\n  builder,\n  uniforms,\n  vertContext,\n  fragContext,\n) {\n  // COLOR\n  let color = 'vec4(1.0)';\n  if ('icon-color' in style) {\n    color = expressionToGlsl(fragContext, style['icon-color'], ColorType);\n  }\n\n  // OPACITY\n  if ('icon-opacity' in style) {\n    color = `${color} * vec4(1.0, 1.0, 1.0, ${expressionToGlsl(\n      fragContext,\n      style['icon-opacity'],\n      NumberType,\n    )})`;\n  }\n\n  // IMAGE & SIZE\n  const textureId = computeHash(style['icon-src']);\n  const sizeExpression = parseImageProperties(\n    style,\n    builder,\n    uniforms,\n    'icon-',\n    textureId,\n  );\n  builder\n    .setSymbolColorExpression(\n      `${color} * texture2D(u_texture${textureId}, v_texCoord)`,\n    )\n    .setSymbolSizeExpression(sizeExpression);\n\n  // override size if width/height were specified\n  if ('icon-width' in style && 'icon-height' in style) {\n    builder.setSymbolSizeExpression(\n      `vec2(${expressionToGlsl(\n        vertContext,\n        style['icon-width'],\n        NumberType,\n      )}, ${expressionToGlsl(vertContext, style['icon-height'], NumberType)})`,\n    );\n  }\n\n  // tex coord\n  if ('icon-offset' in style && 'icon-size' in style) {\n    const sampleSize = expressionToGlsl(\n      vertContext,\n      style['icon-size'],\n      NumberArrayType,\n    );\n    const fullsize = builder.getSymbolSizeExpression();\n    builder.setSymbolSizeExpression(sampleSize);\n    const offset = parseImageOffsetProperties(\n      style,\n      'icon-',\n      vertContext,\n      'v_quadSizePx',\n      sampleSize,\n    );\n    builder.setTextureCoordinateExpression(\n      `(vec4((${offset}).xyxy) + vec4(0., 0., ${sampleSize})) / (${fullsize}).xyxy`,\n    );\n  }\n\n  parseCommonSymbolProperties(style, builder, vertContext, 'icon-');\n\n  if ('icon-anchor' in style) {\n    const anchor = expressionToGlsl(\n      vertContext,\n      style['icon-anchor'],\n      NumberArrayType,\n    );\n    let scale = `1.0`;\n    if (`icon-scale` in style) {\n      scale = expressionToGlsl(vertContext, style[`icon-scale`], SizeType);\n    }\n    let shiftPx;\n    if (\n      style['icon-anchor-x-units'] === 'pixels' &&\n      style['icon-anchor-y-units'] === 'pixels'\n    ) {\n      shiftPx = `${anchor} * ${scale}`;\n    } else if (style['icon-anchor-x-units'] === 'pixels') {\n      shiftPx = `${anchor} * vec2(vec2(${scale}).x, v_quadSizePx.y)`;\n    } else if (style['icon-anchor-y-units'] === 'pixels') {\n      shiftPx = `${anchor} * vec2(v_quadSizePx.x, vec2(${scale}).x)`;\n    } else {\n      shiftPx = `${anchor} * v_quadSizePx`;\n    }\n    // default origin is top-left\n    let offsetPx = `v_quadSizePx * vec2(0.5, -0.5) + ${shiftPx} * vec2(-1., 1.)`;\n    if ('icon-anchor-origin' in style) {\n      switch (style['icon-anchor-origin']) {\n        case 'top-right':\n          offsetPx = `v_quadSizePx * -0.5 + ${shiftPx}`;\n          break;\n        case 'bottom-left':\n          offsetPx = `v_quadSizePx * 0.5 - ${shiftPx}`;\n          break;\n        case 'bottom-right':\n          offsetPx = `v_quadSizePx * vec2(-0.5, 0.5) + ${shiftPx} * vec2(1., -1.)`;\n          break;\n        default: // pass\n      }\n    }\n    builder.setSymbolOffsetExpression(\n      `${builder.getSymbolOffsetExpression()} + ${offsetPx}`,\n    );\n  }\n}\n\n/**\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {ShaderBuilder} builder Shader Builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseStrokeProperties(\n  style,\n  builder,\n  uniforms,\n  vertContext,\n  fragContext,\n) {\n  if ('stroke-color' in style) {\n    builder.setStrokeColorExpression(\n      expressionToGlsl(fragContext, style['stroke-color'], ColorType),\n    );\n  }\n  if ('stroke-pattern-src' in style) {\n    const textureId = computeHash(style['stroke-pattern-src']);\n    const sizeExpression = parseImageProperties(\n      style,\n      builder,\n      uniforms,\n      'stroke-pattern-',\n      textureId,\n    );\n    let sampleSizeExpression = sizeExpression;\n    let offsetExpression = 'vec2(0.)';\n    if ('stroke-pattern-offset' in style && 'stroke-pattern-size' in style) {\n      sampleSizeExpression = expressionToGlsl(\n        fragContext,\n        style[`stroke-pattern-size`],\n        NumberArrayType,\n      );\n      offsetExpression = parseImageOffsetProperties(\n        style,\n        'stroke-pattern-',\n        fragContext,\n        sizeExpression,\n        sampleSizeExpression,\n      );\n    }\n    let spacingExpression = '0.';\n    if ('stroke-pattern-spacing' in style) {\n      spacingExpression = expressionToGlsl(\n        fragContext,\n        style['stroke-pattern-spacing'],\n        NumberType,\n      );\n    }\n    fragContext.functions['sampleStrokePattern'] =\n      `vec4 sampleStrokePattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, float spacingPx, float currentLengthPx, float currentRadiusRatio, float lineWidth) {\n  float currentLengthScaled = currentLengthPx * sampleSize.y / lineWidth;\n  float spacingScaled = spacingPx * sampleSize.y / lineWidth;\n  float uCoordPx = mod(currentLengthScaled, (sampleSize.x + spacingScaled));\n  // make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels\n  uCoordPx = clamp(uCoordPx, 0.5, sampleSize.x - 0.5);\n  float vCoordPx = (-currentRadiusRatio * 0.5 + 0.5) * sampleSize.y;\n  vec2 texCoord = (vec2(uCoordPx, vCoordPx) + textureOffset) / textureSize;\n  return texture2D(texture, texCoord);\n}`;\n    const textureName = `u_texture${textureId}`;\n    let tintExpression = '1.';\n    if ('stroke-color' in style) {\n      tintExpression = builder.getStrokeColorExpression();\n    }\n    builder.setStrokeColorExpression(\n      `${tintExpression} * sampleStrokePattern(${textureName}, ${sizeExpression}, ${offsetExpression}, ${sampleSizeExpression}, ${spacingExpression}, currentLengthPx, currentRadiusRatio, v_width)`,\n    );\n  }\n\n  if ('stroke-width' in style) {\n    builder.setStrokeWidthExpression(\n      expressionToGlsl(vertContext, style['stroke-width'], NumberType),\n    );\n  }\n\n  if ('stroke-offset' in style) {\n    builder.setStrokeOffsetExpression(\n      expressionToGlsl(vertContext, style['stroke-offset'], NumberType),\n    );\n  }\n\n  if ('stroke-line-cap' in style) {\n    builder.setStrokeCapExpression(\n      expressionToGlsl(vertContext, style['stroke-line-cap'], StringType),\n    );\n  }\n\n  if ('stroke-line-join' in style) {\n    builder.setStrokeJoinExpression(\n      expressionToGlsl(vertContext, style['stroke-line-join'], StringType),\n    );\n  }\n\n  if ('stroke-miter-limit' in style) {\n    builder.setStrokeMiterLimitExpression(\n      expressionToGlsl(vertContext, style['stroke-miter-limit'], NumberType),\n    );\n  }\n\n  if ('stroke-line-dash' in style) {\n    fragContext.functions['getSingleDashDistance'] =\n      `float getSingleDashDistance(float distance, float radius, float dashOffset, float dashLength, float dashLengthTotal, float capType) {\n  float localDistance = mod(distance, dashLengthTotal);\n  float distanceSegment = abs(localDistance - dashOffset - dashLength * 0.5) - dashLength * 0.5;\n  distanceSegment = min(distanceSegment, dashLengthTotal - localDistance);\n  if (capType == ${stringToGlsl('square')}) {\n    distanceSegment -= v_width * 0.5;\n  } else if (capType == ${stringToGlsl('round')}) {\n    distanceSegment = min(distanceSegment, sqrt(distanceSegment * distanceSegment + radius * radius) - v_width * 0.5);\n  }\n  return distanceSegment;\n}`;\n\n    let dashPattern = style['stroke-line-dash'].map((v) =>\n      expressionToGlsl(fragContext, v, NumberType),\n    );\n    // if pattern has odd length, concatenate it with itself to be even\n    if (dashPattern.length % 2 === 1) {\n      dashPattern = [...dashPattern, ...dashPattern];\n    }\n\n    let offsetExpression = '0.';\n    if ('stroke-line-dash-offset' in style) {\n      offsetExpression = expressionToGlsl(\n        vertContext,\n        style['stroke-line-dash-offset'],\n        NumberType,\n      );\n    }\n\n    // define a function for this dash specifically\n    const uniqueDashKey = computeHash(style['stroke-line-dash']);\n    const dashFunctionName = `dashDistanceField_${uniqueDashKey}`;\n\n    const dashLengthsDef = dashPattern.map(\n      (v, i) => `float dashLength${i} = ${v};`,\n    );\n    const totalLengthDef = dashPattern\n      .map((v, i) => `dashLength${i}`)\n      .join(' + ');\n    let currentDashOffset = '0.';\n    let distanceExpression = `getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength0, totalDashLength, capType)`;\n    for (let i = 2; i < dashPattern.length; i += 2) {\n      currentDashOffset = `${currentDashOffset} + dashLength${\n        i - 2\n      } + dashLength${i - 1}`;\n      distanceExpression = `min(${distanceExpression}, getSingleDashDistance(distance, radius, ${currentDashOffset}, dashLength${i}, totalDashLength, capType))`;\n    }\n\n    fragContext.functions[dashFunctionName] =\n      `float ${dashFunctionName}(float distance, float radius, float capType) {\n  ${dashLengthsDef.join('\\n  ')}\n  float totalDashLength = ${totalLengthDef};\n  return ${distanceExpression};\n}`;\n    builder.setStrokeDistanceFieldExpression(\n      `${dashFunctionName}(currentLengthPx + ${offsetExpression}, currentRadiusPx, capType)`,\n    );\n  }\n}\n\n/**\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Style\n * @param {ShaderBuilder} builder Shader Builder\n * @param {Object<string,import(\"../webgl/Helper\").UniformValue>} uniforms Uniforms\n * @param {import(\"../expr/gpu.js\").CompilationContext} vertContext Vertex shader compilation context\n * @param {import(\"../expr/gpu.js\").CompilationContext} fragContext Fragment shader compilation context\n */\nfunction parseFillProperties(\n  style,\n  builder,\n  uniforms,\n  vertContext,\n  fragContext,\n) {\n  if ('fill-color' in style) {\n    builder.setFillColorExpression(\n      expressionToGlsl(fragContext, style['fill-color'], ColorType),\n    );\n  }\n  if ('fill-pattern-src' in style) {\n    const textureId = computeHash(style['fill-pattern-src']);\n    const sizeExpression = parseImageProperties(\n      style,\n      builder,\n      uniforms,\n      'fill-pattern-',\n      textureId,\n    );\n    let sampleSizeExpression = sizeExpression;\n    let offsetExpression = 'vec2(0.)';\n    if ('fill-pattern-offset' in style && 'fill-pattern-size' in style) {\n      sampleSizeExpression = expressionToGlsl(\n        fragContext,\n        style[`fill-pattern-size`],\n        NumberArrayType,\n      );\n      offsetExpression = parseImageOffsetProperties(\n        style,\n        'fill-pattern-',\n        fragContext,\n        sizeExpression,\n        sampleSizeExpression,\n      );\n    }\n    fragContext.functions['sampleFillPattern'] =\n      `vec4 sampleFillPattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, vec2 pxOrigin, vec2 pxPosition) {\n  float scaleRatio = pow(2., mod(u_zoom + 0.5, 1.) - 0.5);\n  vec2 pxRelativePos = pxPosition - pxOrigin;\n  // rotate the relative position from origin by the current view rotation\n  pxRelativePos = vec2(pxRelativePos.x * cos(u_rotation) - pxRelativePos.y * sin(u_rotation), pxRelativePos.x * sin(u_rotation) + pxRelativePos.y * cos(u_rotation));\n  // sample position is computed according to the sample offset & size\n  vec2 samplePos = mod(pxRelativePos / scaleRatio, sampleSize);\n  // also make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels\n  samplePos = clamp(samplePos, vec2(0.5), sampleSize - vec2(0.5));\n  samplePos.y = sampleSize.y - samplePos.y; // invert y axis so that images appear upright\n  return texture2D(texture, (samplePos + textureOffset) / textureSize);\n}`;\n    const textureName = `u_texture${textureId}`;\n    let tintExpression = '1.';\n    if ('fill-color' in style) {\n      tintExpression = builder.getFillColorExpression();\n    }\n    builder.setFillColorExpression(\n      `${tintExpression} * sampleFillPattern(${textureName}, ${sizeExpression}, ${offsetExpression}, ${sampleSizeExpression}, pxOrigin, pxPos)`,\n    );\n  }\n}\n\n/**\n * @typedef {Object} StyleParseResult\n * @property {ShaderBuilder} builder Shader builder pre-configured according to a given style\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").UniformDefinitions} uniforms Uniform definitions\n * @property {import(\"../render/webgl/VectorStyleRenderer.js\").AttributeDefinitions} attributes Attribute definitions\n */\n\n/**\n * Parses a {@link import(\"../style/webgl.js\").WebGLStyle} object and returns a {@link ShaderBuilder}\n * object that has been configured according to the given style, as well as `attributes` and `uniforms`\n * arrays to be fed to the `WebGLPointsRenderer` class.\n *\n * Also returns `uniforms` and `attributes` properties as expected by the\n * {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n * @param {import(\"../style/webgl.js\").WebGLStyle} style Literal style.\n * @return {StyleParseResult} Result containing shader params, attributes and uniforms.\n */\nexport function parseLiteralStyle(style) {\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const vertContext = {\n    inFragmentShader: false,\n    properties: {},\n    variables: {},\n    functions: {},\n    style,\n  };\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const fragContext = {\n    inFragmentShader: true,\n    variables: vertContext.variables,\n    properties: {},\n    functions: {},\n    style,\n  };\n\n  const builder = new ShaderBuilder();\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  if ('icon-src' in style) {\n    parseIconProperties(style, builder, uniforms, vertContext, fragContext);\n  } else if ('shape-points' in style) {\n    parseShapeProperties(style, builder, uniforms, vertContext, fragContext);\n  } else if ('circle-radius' in style) {\n    parseCircleProperties(style, builder, uniforms, vertContext, fragContext);\n  }\n  parseStrokeProperties(style, builder, uniforms, vertContext, fragContext);\n  parseFillProperties(style, builder, uniforms, vertContext, fragContext);\n\n  if (style.filter) {\n    const parsedFilter = expressionToGlsl(\n      fragContext,\n      style.filter,\n      BooleanType,\n    );\n    builder.setFragmentDiscardExpression(`!${parsedFilter}`);\n  }\n\n  // define one uniform per variable\n  for (const varName in fragContext.variables) {\n    const variable = fragContext.variables[varName];\n    const uniformName = uniformNameForVariable(variable.name);\n    builder.addUniform(`${getGlslTypeFromType(variable.type)} ${uniformName}`);\n\n    uniforms[uniformName] = () => {\n      const value = style.variables[variable.name];\n      if (typeof value === 'number') {\n        return value;\n      }\n      if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      if (variable.type === ColorType) {\n        return packColor([...asArray(value || '#eee')]);\n      }\n      if (typeof value === 'string') {\n        return getStringNumberEquivalent(value);\n      }\n      return value;\n    };\n  }\n\n  // for each feature attribute used in the fragment shader, define a varying that will be used to pass data\n  // from the vertex to the fragment shader, as well as an attribute in the vertex shader (if not already present)\n  for (const propName in fragContext.properties) {\n    const property = fragContext.properties[propName];\n    if (!vertContext.properties[propName]) {\n      vertContext.properties[propName] = property;\n    }\n    let type = getGlslTypeFromType(property.type);\n    let expression = `a_prop_${property.name}`;\n    if (property.type === ColorType) {\n      type = 'vec4';\n      expression = `unpackColor(${expression})`;\n      builder.addVertexShaderFunction(UNPACK_COLOR_FN);\n    }\n    builder.addVarying(`v_prop_${property.name}`, type, expression);\n  }\n\n  // for each feature attribute used in the vertex shader, define an attribute in the vertex shader.\n  for (const propName in vertContext.properties) {\n    const property = vertContext.properties[propName];\n    builder.addAttribute(\n      `${getGlslTypeFromType(property.type)} a_prop_${property.name}`,\n    );\n  }\n\n  // add functions that were collected in the compilation contexts\n  for (const functionName in vertContext.functions) {\n    builder.addVertexShaderFunction(vertContext.functions[functionName]);\n  }\n  for (const functionName in fragContext.functions) {\n    builder.addFragmentShaderFunction(fragContext.functions[functionName]);\n  }\n\n  /**\n   * @type {import('../render/webgl/VectorStyleRenderer.js').AttributeDefinitions}\n   */\n  const attributes = {};\n  for (const propName in vertContext.properties) {\n    const property = vertContext.properties[propName];\n    const callback = (feature) => {\n      const value = property.evaluator\n        ? property.evaluator(feature)\n        : feature.get(property.name);\n      if (property.type === ColorType) {\n        return packColor([...asArray(value || '#eee')]);\n      }\n      if (typeof value === 'string') {\n        return getStringNumberEquivalent(value);\n      }\n      if (typeof value === 'boolean') {\n        return value ? 1 : 0;\n      }\n      return value;\n    };\n\n    attributes[property.name] = {\n      size: getGlslSizeFromType(property.type),\n      callback,\n    };\n  }\n\n  return {builder, attributes, uniforms};\n}\n", "/**\n * @module ol/layer/WebGLTile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, {\n  Attributes,\n  Uniforms,\n} from '../renderer/webgl/TileLayer.js';\nimport {ColorType, NumberType} from '../expr/expression.js';\nimport {\n  PALETTE_TEXTURE_ARRAY,\n  getStringNumberEquivalent,\n  newCompilationContext,\n  uniformNameForVariable,\n} from '../expr/gpu.js';\nimport {expressionToGlsl} from '../webgl/styleparser.js';\n\n/**\n * @typedef {import(\"../source/DataTile.js\").default<import(\"../DataTile.js\").default|import(\"../ImageTile.js\").default>} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../expr/expression.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../expr/expression.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid. **Note:** All sources must have the same band count and content.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\nfunction parseStyle(style, bandCount) {\n  const vertexShader = `\n    attribute vec2 ${Attributes.TEXTURE_COORD};\n    uniform mat4 ${Uniforms.TILE_TRANSFORM};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.TEXTURE_RESOLUTION};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_X};\n    uniform float ${Uniforms.TEXTURE_ORIGIN_Y};\n    uniform float ${Uniforms.DEPTH};\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n\n    void main() {\n      v_textureCoord = ${Attributes.TEXTURE_COORD};\n      v_mapCoord = vec2(\n        ${Uniforms.TEXTURE_ORIGIN_X} + ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_WIDTH} * v_textureCoord[0],\n        ${Uniforms.TEXTURE_ORIGIN_Y} - ${Uniforms.TEXTURE_RESOLUTION} * ${Uniforms.TEXTURE_PIXEL_HEIGHT} * v_textureCoord[1]\n      );\n      gl_Position = ${Uniforms.TILE_TRANSFORM} * vec4(${Attributes.TEXTURE_COORD}, ${Uniforms.DEPTH}, 1.0);\n    }\n  `;\n\n  /**\n   * @type {import(\"../expr/gpu.js\").CompilationContext}\n   */\n  const context = {\n    ...newCompilationContext(),\n    inFragmentShader: true,\n    bandCount: bandCount,\n    style: style,\n  };\n\n  const pipeline = [];\n\n  if (style.color !== undefined) {\n    const color = expressionToGlsl(context, style.color, ColorType);\n    pipeline.push(`color = ${color};`);\n  }\n\n  if (style.contrast !== undefined) {\n    const contrast = expressionToGlsl(context, style.contrast, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${contrast} + 1.0) * color.rgb - (${contrast} / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  if (style.exposure !== undefined) {\n    const exposure = expressionToGlsl(context, style.exposure, NumberType);\n    pipeline.push(\n      `color.rgb = clamp((${exposure} + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  if (style.saturation !== undefined) {\n    const saturation = expressionToGlsl(context, style.saturation, NumberType);\n    pipeline.push(`\n      float saturation = ${saturation} + 1.0;\n      float sr = (1.0 - saturation) * 0.2126;\n      float sg = (1.0 - saturation) * 0.7152;\n      float sb = (1.0 - saturation) * 0.0722;\n      mat3 saturationMatrix = mat3(\n        sr + saturation, sr, sr,\n        sg, sg + saturation, sg,\n        sb, sb, sb + saturation\n      );\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\n    `);\n  }\n\n  if (style.gamma !== undefined) {\n    const gamma = expressionToGlsl(context, style.gamma, NumberType);\n    pipeline.push(`color.rgb = pow(color.rgb, vec3(1.0 / ${gamma}));`);\n  }\n\n  if (style.brightness !== undefined) {\n    const brightness = expressionToGlsl(context, style.brightness, NumberType);\n    pipeline.push(\n      `color.rgb = clamp(color.rgb + ${brightness}, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));`,\n    );\n  }\n\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n  const uniforms = {};\n\n  const numVariables = Object.keys(context.variables).length;\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\n      `Missing variables in style (expected ${context.variables})`,\n    );\n  }\n\n  for (let i = 0; i < numVariables; ++i) {\n    const variable = context.variables[Object.keys(context.variables)[i]];\n    if (!(variable.name in style.variables)) {\n      throw new Error(`Missing '${variable.name}' in style variables`);\n    }\n    const uniformName = uniformNameForVariable(variable.name);\n    uniforms[uniformName] = function () {\n      let value = style.variables[variable.name];\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(value);\n      }\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  }\n\n  const uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return `uniform float ${name};`;\n  });\n\n  const textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\n    `uniform sampler2D ${Uniforms.TILE_TEXTURE_ARRAY}[${textureCount}];`,\n  );\n\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\n      `uniform sampler2D ${PALETTE_TEXTURE_ARRAY}[${context.paletteTextures.length}];`,\n    );\n  }\n\n  const functionDefintions = Object.keys(context.functions).map(\n    function (name) {\n      return context.functions[name];\n    },\n  );\n\n  const fragmentShader = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    #else\n    precision mediump float;\n    #endif\n\n    varying vec2 v_textureCoord;\n    varying vec2 v_mapCoord;\n    uniform vec4 ${Uniforms.RENDER_EXTENT};\n    uniform float ${Uniforms.TRANSITION_ALPHA};\n    uniform float ${Uniforms.TEXTURE_PIXEL_WIDTH};\n    uniform float ${Uniforms.TEXTURE_PIXEL_HEIGHT};\n    uniform float ${Uniforms.RESOLUTION};\n    uniform float ${Uniforms.ZOOM};\n\n    ${uniformDeclarations.join('\\n')}\n\n    ${functionDefintions.join('\\n')}\n\n    void main() {\n      if (\n        v_mapCoord[0] < ${Uniforms.RENDER_EXTENT}[0] ||\n        v_mapCoord[1] < ${Uniforms.RENDER_EXTENT}[1] ||\n        v_mapCoord[0] > ${Uniforms.RENDER_EXTENT}[2] ||\n        v_mapCoord[1] > ${Uniforms.RENDER_EXTENT}[3]\n      ) {\n        discard;\n      }\n\n      vec4 color = texture2D(${\n        Uniforms.TILE_TEXTURE_ARRAY\n      }[0],  v_textureCoord);\n\n      ${pipeline.join('\\n')}\n\n      gl_FragColor = color;\n      gl_FragColor.rgb *= gl_FragColor.a;\n      gl_FragColor *= ${Uniforms.TRANSITION_ALPHA};\n    }`;\n\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures,\n  };\n}\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass WebGLTileLayer extends BaseTileLayer {\n  /**\n   * @param {Options} options Tile layer options.\n   */\n  constructor(options) {\n    options = options ? Object.assign({}, options) : {};\n\n    const style = options.style || {};\n    delete options.style;\n\n    super(options);\n\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n    this.sources_ = options.sources;\n\n    /**\n     * @type {SourceType|null}\n     * @private\n     */\n    this.renderedSource_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.style_ = style;\n\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n    this.styleVariables_ = this.style_.variables || {};\n\n    this.addChangeListener(LayerProperty.SOURCE, this.handleSourceUpdate_);\n  }\n\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n  getSources(extent, resolution) {\n    const source = this.getSource();\n    return this.sources_\n      ? typeof this.sources_ === 'function'\n        ? this.sources_(extent, resolution)\n        : this.sources_\n      : source\n        ? [source]\n        : [];\n  }\n\n  /**\n   * @return {SourceType} The source being rendered.\n   * @override\n   */\n  getRenderSource() {\n    return this.renderedSource_ || this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   * @override\n   */\n  getSourceState() {\n    const source = this.getRenderSource();\n    return source ? source.getState() : 'undefined';\n  }\n\n  /**\n   * @private\n   */\n  handleSourceUpdate_() {\n    if (this.hasRenderer()) {\n      this.getRenderer().clearCache();\n    }\n    const source = this.getSource();\n    if (source) {\n      if (source.getState() === 'loading') {\n        const onChange = () => {\n          if (source.getState() === 'ready') {\n            source.removeEventListener('change', onChange);\n            this.setStyle(this.style_);\n          }\n        };\n        source.addEventListener('change', onChange);\n      } else {\n        this.setStyle(this.style_);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n  getSourceBandCount_() {\n    const max = Number.MAX_SAFE_INTEGER;\n    const sources = this.getSources([-max, -max, max, max], max);\n    return sources && sources.length && 'bandCount' in sources[0]\n      ? sources[0].bandCount\n      : 4;\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.getCacheSize(),\n      paletteTextures: parsedStyle.paletteTextures,\n    });\n  }\n\n  /**\n   * @param {import(\"../Map\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n  renderSources(frameState, sources) {\n    const layerRenderer = this.getRenderer();\n    let canvas;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      this.renderedSource_ = sources[i];\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  render(frameState, target) {\n    this.rendered = true;\n    const viewState = frameState.viewState;\n    const sources = this.getSources(frameState.extent, viewState.resolution);\n    let ready = true;\n    for (let i = 0, ii = sources.length; i < ii; ++i) {\n      const source = sources[i];\n      const sourceState = source.getState();\n      if (sourceState == 'loading') {\n        const onChange = () => {\n          if (source.getState() == 'ready') {\n            source.removeEventListener('change', onChange);\n            this.changed();\n          }\n        };\n        source.addEventListener('change', onChange);\n      }\n      ready = ready && sourceState == 'ready';\n    }\n    const canvas = this.renderSources(frameState, sources);\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    }\n    // Render sources from previously fully rendered frames\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      const altSources = this.getSources(\n        frameState.extent,\n        this.renderedResolution_,\n      ).filter((source) => !sources.includes(source));\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n    return canvas;\n  }\n\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n  setStyle(style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    if (this.hasRenderer()) {\n      const parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n      const renderer = this.getRenderer();\n      renderer.reset({\n        vertexShader: parsedStyle.vertexShader,\n        fragmentShader: parsedStyle.fragmentShader,\n        uniforms: parsedStyle.uniforms,\n        paletteTextures: parsedStyle.paletteTextures,\n      });\n      this.changed();\n    }\n  }\n\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n  updateStyleVariables(variables) {\n    Object.assign(this.styleVariables_, variables);\n    this.changed();\n  }\n}\n\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\nWebGLTileLayer.prototype.dispose;\n\nexport default WebGLTileLayer;\n"],
  "mappings": "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",
  "names": ["offset", "create", "create", "options", "EventType_default", "Layer_default", "Layer_default", "create", "DataTile_default", "Uniforms", "DataTile_default", "Uniforms", "scale", "Uniforms"]
}
